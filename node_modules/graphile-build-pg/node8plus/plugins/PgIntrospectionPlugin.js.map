{"version":3,"sources":["../../src/plugins/PgIntrospectionPlugin.js"],"names":["debug","WATCH_FIXTURES_PATH","__dirname","readFile","filename","encoding","Promise","resolve","reject","err","res","PgIntrospectionPlugin","builder","pgConfig","pgSchemas","schemas","pgEnableTags","persistentMemoizeWithKey","key","fn","pgThrowOnMissingSchema","pgIncludeExtensionResources","pgLegacyFunctionsOnly","pgSkipInstallingWatchFixtures","introspect","Array","isArray","Error","cacheKey","version","cloneResults","obj","result","Object","keys","reduce","memo","k","map","v","assign","introspectionResultsByKind","pgClient","versionResult","query","serverVersionNum","parseInt","rows","server_version_num","introspectionQuery","namespace","class","attribute","type","constraint","procedure","extension","index","object","kind","push","forEach","comment","description","parsed","tags","text","extensionConfigurationClassIds","e","configurationClassIds","klass","isExtensionConfigurationTable","indexOf","id","freeze","knownSchemas","n","name","missingSchemas","filter","s","length","errorMessage","join","console","warn","xByY","arrayOfX","attrKey","x","xByYAndZ","attrKey2","namespaceById","classById","typeById","attributeByClassIdAndNum","extensionById","relate","array","newAttr","lookupAttr","lookup","missingOk","entry","innerKey","JSON","stringify","_","arrayItemType","arrayType","attributes","attr","classId","constraints","foreignConstraints","foreignClassId","primaryKeyConstraint","find","keyAttributeNums","keyAttributes","nr","num","foreignKeyAttributeNums","foreignClass","foreignKeyAttributes","columns","attributeNums","isIndexed","every","idx","releasePgClient","listener","stopListening","catch","removeListener","registerWatcher","triggerRebuild","pg","Pool","connect","release","Client","on","end","watchSqlInner","sql","error","chalk","bold","yellow","handleChange","leading","trailing","notification","channel","payload","parse","commands","schema","command","affectsOurSchemas","some","schemaName","hook","build","extend","pgIntrospectionResultsByKind"],"mappings":"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","file":"PgIntrospectionPlugin.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport withPgClient from \"../withPgClient\";\nimport { parseTags } from \"../utils\";\nimport { readFile as rawReadFile } from \"fs\";\nimport pg from \"pg\";\nimport debugFactory from \"debug\";\nimport chalk from \"chalk\";\nimport throttle from \"lodash/throttle\";\nimport flatMap from \"lodash/flatMap\";\nimport { quacksLikePgPool } from \"../withPgClient\";\nimport { makeIntrospectionQuery } from \"./introspectionQuery\";\n\nimport { version } from \"../../package.json\";\n\nconst debug = debugFactory(\"graphile-build-pg\");\nconst WATCH_FIXTURES_PATH = `${__dirname}/../../res/watch-fixtures.sql`;\n\n// Ref: https://github.com/graphile/postgraphile/tree/master/src/postgres/introspection/object\n\nexport type PgNamespace = {\n  kind: \"namespace\",\n  id: string,\n  name: string,\n  comment: ?string,\n  description: ?string,\n  tags: { [string]: string },\n};\n\nexport type PgProc = {\n  kind: \"procedure\",\n  id: string,\n  name: string,\n  comment: ?string,\n  description: ?string,\n  namespaceId: string,\n  namespaceName: string,\n  isStrict: boolean,\n  returnsSet: boolean,\n  isStable: boolean,\n  returnTypeId: string,\n  argTypeIds: Array<string>,\n  argNames: Array<string>,\n  argModes: Array<\"i\" | \"o\" | \"b\" | \"v\" | \"t\">,\n  argDefaultsNum: number,\n  namespace: PgNamespace,\n  tags: { [string]: string },\n  cost: number,\n  aclExecutable: boolean,\n};\n\nexport type PgClass = {\n  kind: \"class\",\n  id: string,\n  name: string,\n  comment: ?string,\n  description: ?string,\n  classKind: string,\n  namespaceId: string,\n  namespaceName: string,\n  typeId: string,\n  isSelectable: boolean,\n  isInsertable: boolean,\n  isUpdatable: boolean,\n  isDeletable: boolean,\n  isExtensionConfigurationTable: boolean,\n  namespace: PgNamespace,\n  type: PgType,\n  tags: { [string]: string },\n  attributes: [PgAttribute],\n  constraints: [PgConstraint],\n  foreignConstraints: [PgConstraint],\n  primaryKeyConstraint: ?PgConstraint,\n  aclSelectable: boolean,\n  aclInsertable: boolean,\n  aclUpdatable: boolean,\n  aclDeletable: boolean,\n};\n\nexport type PgType = {\n  kind: \"type\",\n  id: string,\n  name: string,\n  comment: ?string,\n  description: ?string,\n  namespaceId: string,\n  namespaceName: string,\n  type: string,\n  category: string,\n  domainIsNotNull: boolean,\n  arrayItemTypeId: ?string,\n  arrayItemType: ?PgType,\n  arrayType: ?PgType,\n  typeLength: ?number,\n  isPgArray: boolean,\n  classId: ?string,\n  domainBaseTypeId: ?string,\n  domainTypeModifier: ?number,\n  tags: { [string]: string },\n};\n\nexport type PgAttribute = {\n  kind: \"attribute\",\n  classId: string,\n  num: number,\n  name: string,\n  comment: ?string,\n  description: ?string,\n  typeId: string,\n  typeModifier: number,\n  isNotNull: boolean,\n  hasDefault: boolean,\n  identity: \"\" | \"a\" | \"d\",\n  class: PgClass,\n  type: PgType,\n  namespace: PgNamespace,\n  tags: { [string]: string },\n  aclSelectable: boolean,\n  aclInsertable: boolean,\n  aclUpdatable: boolean,\n  isIndexed: ?boolean,\n};\n\nexport type PgConstraint = {\n  kind: \"constraint\",\n  id: string,\n  name: string,\n  type: string,\n  classId: string,\n  class: PgClass,\n  foreignClassId: ?string,\n  foreignClass: ?PgClass,\n  comment: ?string,\n  description: ?string,\n  keyAttributeNums: Array<number>,\n  keyAttributes: [PgAttribute],\n  foreignKeyAttributeNums: Array<number>,\n  foreignKeyAttributes: [PgAttribute],\n  namespace: PgNamespace,\n  isIndexed: ?boolean,\n  tags: { [string]: string },\n};\n\nexport type PgExtension = {\n  kind: \"extension\",\n  id: string,\n  name: string,\n  namespaceId: string,\n  relocatable: boolean,\n  version: string,\n  configurationClassIds?: Array<string>,\n  comment: ?string,\n  description: ?string,\n  tags: { [string]: string },\n};\n\nexport type PgIndex = {\n  kind: \"index\",\n  id: string,\n  name: string,\n  namespaceName: string,\n  classId: string,\n  numberOfAttributes: number,\n  isUnique: boolean,\n  isPrimary: boolean,\n  /*\n  Though these exist, we don't want to officially\n  support them yet.\n\n  isImmediate: boolean,\n  isReplicaIdentity: boolean,\n  isValid: boolean,\n  */\n  attributeNums: Array<number>,\n  description: ?string,\n  tags: { [string]: string },\n};\n\nexport type PgEntity =\n  | PgNamespace\n  | PgProc\n  | PgClass\n  | PgType\n  | PgAttribute\n  | PgConstraint\n  | PgExtension\n  | PgIndex;\n\nfunction readFile(filename, encoding) {\n  return new Promise((resolve, reject) => {\n    rawReadFile(filename, encoding, (err, res) => {\n      if (err) reject(err);\n      else resolve(res);\n    });\n  });\n}\n\nexport default (async function PgIntrospectionPlugin(\n  builder,\n  {\n    pgConfig,\n    pgSchemas: schemas,\n    pgEnableTags,\n    persistentMemoizeWithKey = (key, fn) => fn(),\n    pgThrowOnMissingSchema = false,\n    pgIncludeExtensionResources = false,\n    pgLegacyFunctionsOnly = false,\n    pgSkipInstallingWatchFixtures = false,\n  }\n) {\n  async function introspect() {\n    // Perform introspection\n    if (!Array.isArray(schemas)) {\n      throw new Error(\"Argument 'schemas' (array) is required\");\n    }\n    const cacheKey = `PgIntrospectionPlugin-introspectionResultsByKind-v${version}`;\n    const cloneResults = obj => {\n      const result = Object.keys(obj).reduce((memo, k) => {\n        memo[k] = obj[k].map(v => Object.assign({}, v));\n        return memo;\n      }, {});\n      return result;\n    };\n    const introspectionResultsByKind = cloneResults(\n      await persistentMemoizeWithKey(cacheKey, () =>\n        withPgClient(pgConfig, async pgClient => {\n          const versionResult = await pgClient.query(\n            \"show server_version_num;\"\n          );\n          const serverVersionNum = parseInt(\n            versionResult.rows[0].server_version_num,\n            10\n          );\n          const introspectionQuery = makeIntrospectionQuery(serverVersionNum, {\n            pgLegacyFunctionsOnly,\n          });\n          const { rows } = await pgClient.query(introspectionQuery, [\n            schemas,\n            pgIncludeExtensionResources,\n          ]);\n\n          const result = {\n            namespace: [],\n            class: [],\n            attribute: [],\n            type: [],\n            constraint: [],\n            procedure: [],\n            extension: [],\n            index: [],\n          };\n          for (const { object } of rows) {\n            result[object.kind].push(object);\n          }\n\n          // Parse tags from comments\n          [\n            \"namespace\",\n            \"class\",\n            \"attribute\",\n            \"type\",\n            \"constraint\",\n            \"procedure\",\n            \"extension\",\n            \"index\",\n          ].forEach(kind => {\n            result[kind].forEach(object => {\n              // Keep a copy of the raw comment\n              object.comment = object.description;\n              if (pgEnableTags && object.description) {\n                const parsed = parseTags(object.description);\n                object.tags = parsed.tags;\n                object.description = parsed.text;\n              } else {\n                object.tags = {};\n              }\n            });\n          });\n\n          const extensionConfigurationClassIds = flatMap(\n            result.extension,\n            e => e.configurationClassIds\n          );\n          result.class.forEach(klass => {\n            klass.isExtensionConfigurationTable =\n              extensionConfigurationClassIds.indexOf(klass.id) >= 0;\n          });\n\n          for (const k in result) {\n            result[k].forEach(Object.freeze);\n          }\n          return Object.freeze(result);\n        })\n      )\n    );\n\n    const knownSchemas = introspectionResultsByKind.namespace.map(n => n.name);\n    const missingSchemas = schemas.filter(s => knownSchemas.indexOf(s) < 0);\n    if (missingSchemas.length) {\n      const errorMessage = `You requested to use schema '${schemas.join(\n        \"', '\"\n      )}'; however we couldn't find some of those! Missing schemas are: '${missingSchemas.join(\n        \"', '\"\n      )}'`;\n      if (pgThrowOnMissingSchema) {\n        throw new Error(errorMessage);\n      } else {\n        console.warn(\"⚠️ WARNING⚠️  \" + errorMessage); // eslint-disable-line no-console\n      }\n    }\n\n    const xByY = (arrayOfX, attrKey) =>\n      arrayOfX.reduce((memo, x) => {\n        memo[x[attrKey]] = x;\n        return memo;\n      }, {});\n    const xByYAndZ = (arrayOfX, attrKey, attrKey2) =>\n      arrayOfX.reduce((memo, x) => {\n        if (!memo[x[attrKey]]) memo[x[attrKey]] = {};\n        memo[x[attrKey]][x[attrKey2]] = x;\n        return memo;\n      }, {});\n    introspectionResultsByKind.namespaceById = xByY(\n      introspectionResultsByKind.namespace,\n      \"id\"\n    );\n    introspectionResultsByKind.classById = xByY(\n      introspectionResultsByKind.class,\n      \"id\"\n    );\n    introspectionResultsByKind.typeById = xByY(\n      introspectionResultsByKind.type,\n      \"id\"\n    );\n    introspectionResultsByKind.attributeByClassIdAndNum = xByYAndZ(\n      introspectionResultsByKind.attribute,\n      \"classId\",\n      \"num\"\n    );\n    introspectionResultsByKind.extensionById = xByY(\n      introspectionResultsByKind.extension,\n      \"id\"\n    );\n\n    const relate = (array, newAttr, lookupAttr, lookup, missingOk = false) => {\n      array.forEach(entry => {\n        const key = entry[lookupAttr];\n        if (Array.isArray(key)) {\n          entry[newAttr] = key\n            .map(innerKey => {\n              const result = lookup[innerKey];\n              if (innerKey && !result) {\n                if (missingOk) {\n                  return;\n                }\n                throw new Error(\n                  `Could not look up '${newAttr}' by '${lookupAttr}' ('${innerKey}') on '${JSON.stringify(\n                    entry\n                  )}'`\n                );\n              }\n              return result;\n            })\n            .filter(_ => _);\n        } else {\n          const result = lookup[key];\n          if (key && !result) {\n            if (missingOk) {\n              return;\n            }\n            throw new Error(\n              `Could not look up '${newAttr}' by '${lookupAttr}' on '${JSON.stringify(\n                entry\n              )}'`\n            );\n          }\n          entry[newAttr] = result;\n        }\n      });\n    };\n\n    relate(\n      introspectionResultsByKind.class,\n      \"namespace\",\n      \"namespaceId\",\n      introspectionResultsByKind.namespaceById,\n      true // Because it could be a type defined in a different namespace - which is fine so long as we don't allow querying it directly\n    );\n\n    relate(\n      introspectionResultsByKind.class,\n      \"type\",\n      \"typeId\",\n      introspectionResultsByKind.typeById\n    );\n\n    relate(\n      introspectionResultsByKind.attribute,\n      \"class\",\n      \"classId\",\n      introspectionResultsByKind.classById\n    );\n\n    relate(\n      introspectionResultsByKind.attribute,\n      \"type\",\n      \"typeId\",\n      introspectionResultsByKind.typeById\n    );\n\n    relate(\n      introspectionResultsByKind.procedure,\n      \"namespace\",\n      \"namespaceId\",\n      introspectionResultsByKind.namespaceById\n    );\n\n    relate(\n      introspectionResultsByKind.type,\n      \"class\",\n      \"classId\",\n      introspectionResultsByKind.classById,\n      true\n    );\n\n    relate(\n      introspectionResultsByKind.type,\n      \"domainBaseType\",\n      \"domainBaseTypeId\",\n      introspectionResultsByKind.typeById,\n      true // Because not all types are domains\n    );\n\n    relate(\n      introspectionResultsByKind.type,\n      \"arrayItemType\",\n      \"arrayItemTypeId\",\n      introspectionResultsByKind.typeById,\n      true // Because not all types are arrays\n    );\n\n    relate(\n      introspectionResultsByKind.constraint,\n      \"class\",\n      \"classId\",\n      introspectionResultsByKind.classById\n    );\n\n    relate(\n      introspectionResultsByKind.constraint,\n      \"foreignClass\",\n      \"foreignClassId\",\n      introspectionResultsByKind.classById,\n      true // Because many constraints don't apply to foreign classes\n    );\n\n    relate(\n      introspectionResultsByKind.extension,\n      \"namespace\",\n      \"namespaceId\",\n      introspectionResultsByKind.namespaceById,\n      true // Because the extension could be a defined in a different namespace\n    );\n\n    relate(\n      introspectionResultsByKind.extension,\n      \"configurationClasses\",\n      \"configurationClassIds\",\n      introspectionResultsByKind.classById,\n      true // Because the configuration table could be a defined in a different namespace\n    );\n\n    relate(\n      introspectionResultsByKind.index,\n      \"class\",\n      \"classId\",\n      introspectionResultsByKind.classById\n    );\n\n    // Reverse arrayItemType -> arrayType\n    introspectionResultsByKind.type.forEach(type => {\n      if (type.arrayItemType) {\n        type.arrayItemType.arrayType = type;\n      }\n    });\n\n    // Table/type columns / constraints\n    introspectionResultsByKind.class.forEach(klass => {\n      klass.attributes = introspectionResultsByKind.attribute.filter(\n        attr => attr.classId === klass.id\n      );\n      klass.constraints = introspectionResultsByKind.constraint.filter(\n        constraint => constraint.classId === klass.id\n      );\n      klass.foreignConstraints = introspectionResultsByKind.constraint.filter(\n        constraint => constraint.foreignClassId === klass.id\n      );\n      klass.primaryKeyConstraint = klass.constraints.find(\n        constraint => constraint.type === \"p\"\n      );\n    });\n\n    // Constraint attributes\n    introspectionResultsByKind.constraint.forEach(constraint => {\n      if (constraint.keyAttributeNums && constraint.class) {\n        constraint.keyAttributes = constraint.keyAttributeNums.map(nr =>\n          constraint.class.attributes.find(attr => attr.num === nr)\n        );\n      } else {\n        constraint.keyAttributes = [];\n      }\n      if (constraint.foreignKeyAttributeNums && constraint.foreignClass) {\n        constraint.foreignKeyAttributes = constraint.foreignKeyAttributeNums.map(\n          nr => constraint.foreignClass.attributes.find(attr => attr.num === nr)\n        );\n      } else {\n        constraint.foreignKeyAttributes = [];\n      }\n    });\n\n    // Detect which columns and constraints are indexed\n    introspectionResultsByKind.index.forEach(index => {\n      const columns = index.attributeNums.map(nr =>\n        index.class.attributes.find(attr => attr.num === nr)\n      );\n\n      // Indexed column (for orderBy / filter):\n      if (columns[0]) {\n        columns[0].isIndexed = true;\n      }\n\n      // Indexed constraints (for reverse relations):\n      index.class.constraints\n        .filter(constraint => constraint.type === \"f\")\n        .forEach(constraint => {\n          if (\n            constraint.keyAttributeNums.every(\n              (nr, idx) => index.attributeNums[idx] === nr\n            )\n          ) {\n            constraint.isIndexed = true;\n          }\n        });\n    });\n\n    return introspectionResultsByKind;\n  }\n\n  let introspectionResultsByKind = await introspect();\n\n  let pgClient, releasePgClient, listener;\n\n  function stopListening() {\n    if (pgClient) {\n      pgClient.query(\"unlisten postgraphile_watch\").catch(e => {\n        debug(`Error occurred trying to unlisten watch: ${e}`);\n      });\n      pgClient.removeListener(\"notification\", listener);\n    }\n    if (releasePgClient) {\n      releasePgClient();\n      pgClient = null;\n    }\n  }\n\n  builder.registerWatcher(async triggerRebuild => {\n    // In case we started listening before, clean up\n    await stopListening();\n\n    // Check we can get a pgClient\n    if (pgConfig instanceof pg.Pool || quacksLikePgPool(pgConfig)) {\n      pgClient = await pgConfig.connect();\n      releasePgClient = () => pgClient && pgClient.release();\n    } else if (typeof pgConfig === \"string\") {\n      pgClient = new pg.Client(pgConfig);\n      pgClient.on(\"error\", e => {\n        debug(\"pgClient error occurred: %s\", e);\n      });\n      releasePgClient = () =>\n        new Promise((resolve, reject) => {\n          if (pgClient) pgClient.end(err => (err ? reject(err) : resolve()));\n          else resolve();\n        });\n      await new Promise((resolve, reject) => {\n        if (pgClient) {\n          pgClient.connect(err => (err ? reject(err) : resolve()));\n        } else {\n          resolve();\n        }\n      });\n    } else {\n      throw new Error(\n        \"Cannot watch schema with this configuration - need a string or pg.Pool\"\n      );\n    }\n    // Install the watch fixtures.\n    if (!pgSkipInstallingWatchFixtures) {\n      const watchSqlInner = await readFile(WATCH_FIXTURES_PATH, \"utf8\");\n      const sql = `begin; ${watchSqlInner}; commit;`;\n      try {\n        await pgClient.query(sql);\n      } catch (error) {\n        /* eslint-disable no-console */\n        console.warn(\n          `${chalk.bold.yellow(\n            \"Failed to setup watch fixtures in Postgres database\"\n          )} ️️⚠️`\n        );\n        console.warn(\n          chalk.yellow(\n            \"This is likely because your Postgres user is not a superuser. If the\"\n          )\n        );\n        console.warn(\n          chalk.yellow(\n            \"fixtures already exist, the watch functionality may still work.\"\n          )\n        );\n        console.warn(\n          chalk.yellow(\"Enable DEBUG='graphile-build-pg' to see the error\")\n        );\n        debug(error);\n        /* eslint-enable no-console */\n        await pgClient.query(\"rollback\");\n      }\n    }\n\n    await pgClient.query(\"listen postgraphile_watch\");\n\n    const handleChange = throttle(\n      async () => {\n        debug(`Schema change detected: re-inspecting schema...`);\n        introspectionResultsByKind = await introspect();\n        debug(`Schema change detected: re-inspecting schema complete`);\n        triggerRebuild();\n      },\n      750,\n      {\n        leading: true,\n        trailing: true,\n      }\n    );\n\n    listener = async notification => {\n      if (notification.channel !== \"postgraphile_watch\") {\n        return;\n      }\n      try {\n        const payload = JSON.parse(notification.payload);\n        payload.payload = payload.payload || [];\n        if (payload.type === \"ddl\") {\n          const commands = payload.payload\n            .filter(\n              ({ schema }) => schema == null || schemas.indexOf(schema) >= 0\n            )\n            .map(({ command }) => command);\n          if (commands.length) {\n            handleChange();\n          }\n        } else if (payload.type === \"drop\") {\n          const affectsOurSchemas = payload.payload.some(\n            schemaName => schemas.indexOf(schemaName) >= 0\n          );\n          if (affectsOurSchemas) {\n            handleChange();\n          }\n        } else {\n          throw new Error(`Payload type '${payload.type}' not recognised`);\n        }\n      } catch (e) {\n        debug(`Error occurred parsing notification payload: ${e}`);\n      }\n    };\n    pgClient.on(\"notification\", listener);\n    introspectionResultsByKind = await introspect();\n  }, stopListening);\n\n  builder.hook(\"build\", build => {\n    return build.extend(build, {\n      pgIntrospectionResultsByKind: introspectionResultsByKind,\n    });\n  });\n}: Plugin);\n"]}