{"version":3,"sources":["../../src/plugins/pgField.js"],"names":["pgField","build","fieldWithHooks","fieldName","fieldSpecGenerator","fieldScope","whereFrom","options","pgSql","sql","pgQueryFromResolveData","queryFromResolveData","getSafeAliasFromAlias","getSafeAliasFromResolveInfo","fieldContext","fieldSpec","type","FieldType","nullableType","graphql","getNullableType","namedType","getNamedType","isListType","constructor","GraphQLList","getDataFromParsedResolveInfoFragment","addDataGenerator","parsedResolveInfoFragment","safeAlias","alias","resolveData","hoistCursor","usesCursor","length","pgQuery","queryBuilder","select","tableAlias","getTableAlias","identifier","Symbol","query","onlyJsonField","asJson","innerQueryBuilder","parentQueryBuilder","withQueryBuilder","fragment","resolve","data","_args","_context","resolveInfo","map","d"],"mappings":";;;;;kBAAwBA,O;AAAT,SAASA,OAAT,CACbC,KADa,EAEbC,cAFa,EAGbC,SAHa,EAIbC,kBAJa,EAKbC,aAAa,EALA,EAMbC,YAAY,KANC,EAObC,UAAU,EAPG,EAQb;AACA,QAAM;AACJC,WAAOC,GADH;AAEJC,4BAAwBC,oBAFpB;AAGJC,yBAHI;AAIJC;AAJI,MAKFZ,KALJ;AAMA,SAAOC,eACLC,SADK,EAELW,gBAAgB;AACd,UAAMC,YACJ,OAAOX,kBAAP,KAA8B,UAA9B,GACIA,mBAAmBU,YAAnB,CADJ,GAEIV,kBAHN;AAIA,UAAM,EAAEY,MAAMC,SAAR,KAAsBF,SAA5B;AACA,UAAMG,eAAejB,MAAMkB,OAAN,CAAcC,eAAd,CAA8BH,SAA9B,CAArB;AACA,UAAMI,YAAYpB,MAAMkB,OAAN,CAAcG,YAAd,CAA2BL,SAA3B,CAAlB;AACA,UAAMM,aACJL,iBAAiBG,SAAjB,IACAH,aAAaM,WAAb,KAA6BvB,MAAMkB,OAAN,CAAcM,WAF7C;AAGA,UAAM;AACJC,0CADI;AAEJC;AAFI,QAGFb,YAHJ;AAIAa,qBAAiBC,6BAA6B;AAC5C,YAAMC,YAAYjB,sBAChBgB,0BAA0BE,KADV,CAAlB;AAGA,YAAMC,cAAcL,qCAClBE,yBADkB,EAElBX,SAFkB,CAApB;AAIA,aAAO;AACL,YAAIV,QAAQyB,WAAR,IACJD,YAAYE,UADR,IAEJF,YAAYE,UAAZ,CAAuBC,MAFnB,GAGA,EAAED,YAAY,CAAC,IAAD,CAAd,EAHA,GAIA,IAJJ,CADK;AAMLE,iBAASC,gBAAgB;AACvBA,uBAAaC,MAAb,CAAoB,MAAM;AACxB,kBAAMC,aACJhC,cAAc,KAAd,GACI8B,aAAaG,aAAb,EADJ,GAEI9B,IAAI+B,UAAJ,CAAeC,QAAf,CAHN;AAIA,kBAAMC,QAAQ/B,qBACZL,YAAYA,UAAU8B,YAAV,CAAZ,GAAsC3B,IAAI+B,UAAJ,CAAeC,QAAf,CAD1B,EAEZH,UAFY,EAGZP,WAHY,EAIZzB,cAAc,KAAd,GACI,EAAEqC,eAAe,IAAjB,EADJ,GAEI,EAAEC,QAAQ,IAAV,EANQ,EAOZC,qBAAqB;AACnBA,gCAAkBC,kBAAlB,GAAuCV,YAAvC;AACA,kBAAI,OAAO7B,QAAQwC,gBAAf,KAAoC,UAAxC,EAAoD;AAClDxC,wBAAQwC,gBAAR,CAAyBF,iBAAzB,EAA4C;AAC1CjB;AAD0C,iBAA5C;AAGD;AACF,aAdW,CAAd;AAgBA,mBAAOnB,IAAIuC,QAAS,IAAGN,KAAM,GAA7B;AACD,WAtBD,EAsBGb,SAtBH;AAuBD;AA9BI,OAAP;AAgCD,KAxCD;;AA0CA,WAAO;AACLoB,cAAQC,IAAR,EAAcC,KAAd,EAAqBC,QAArB,EAA+BC,WAA/B,EAA4C;AAC1C,cAAMxB,YAAYhB,4BAA4BwC,WAA5B,CAAlB;AACA,YAAIH,KAAKA,IAAL,IAAa,IAAjB,EAAuB,OAAO,IAAP;AACvB,YAAI3B,UAAJ,EAAgB;AACd,iBAAO2B,KAAKA,IAAL,CAAUI,GAAV,CAAcC,KAAMA,KAAK,IAAL,GAAYA,EAAE1B,SAAF,CAAZ,GAA2B,IAA/C,CAAP;AACD,SAFD,MAEO;AACL,iBAAOqB,KAAKA,IAAL,CAAUrB,SAAV,CAAP;AACD;AACF,OATI;AAUL,SAAGd;AAVE,KAAP;AAYD,GAvEI,EAwELV,UAxEK,CAAP;AA0ED","file":"pgField.js","sourcesContent":["export default function pgField(\n  build,\n  fieldWithHooks,\n  fieldName,\n  fieldSpecGenerator,\n  fieldScope = {},\n  whereFrom = false,\n  options = {}\n) {\n  const {\n    pgSql: sql,\n    pgQueryFromResolveData: queryFromResolveData,\n    getSafeAliasFromAlias,\n    getSafeAliasFromResolveInfo,\n  } = build;\n  return fieldWithHooks(\n    fieldName,\n    fieldContext => {\n      const fieldSpec =\n        typeof fieldSpecGenerator === \"function\"\n          ? fieldSpecGenerator(fieldContext)\n          : fieldSpecGenerator;\n      const { type: FieldType } = fieldSpec;\n      const nullableType = build.graphql.getNullableType(FieldType);\n      const namedType = build.graphql.getNamedType(FieldType);\n      const isListType =\n        nullableType !== namedType &&\n        nullableType.constructor === build.graphql.GraphQLList;\n      const {\n        getDataFromParsedResolveInfoFragment,\n        addDataGenerator,\n      } = fieldContext;\n      addDataGenerator(parsedResolveInfoFragment => {\n        const safeAlias = getSafeAliasFromAlias(\n          parsedResolveInfoFragment.alias\n        );\n        const resolveData = getDataFromParsedResolveInfoFragment(\n          parsedResolveInfoFragment,\n          FieldType\n        );\n        return {\n          ...(options.hoistCursor &&\n          resolveData.usesCursor &&\n          resolveData.usesCursor.length\n            ? { usesCursor: [true] }\n            : null),\n          pgQuery: queryBuilder => {\n            queryBuilder.select(() => {\n              const tableAlias =\n                whereFrom === false\n                  ? queryBuilder.getTableAlias()\n                  : sql.identifier(Symbol());\n              const query = queryFromResolveData(\n                whereFrom ? whereFrom(queryBuilder) : sql.identifier(Symbol()),\n                tableAlias,\n                resolveData,\n                whereFrom === false\n                  ? { onlyJsonField: true }\n                  : { asJson: true },\n                innerQueryBuilder => {\n                  innerQueryBuilder.parentQueryBuilder = queryBuilder;\n                  if (typeof options.withQueryBuilder === \"function\") {\n                    options.withQueryBuilder(innerQueryBuilder, {\n                      parsedResolveInfoFragment,\n                    });\n                  }\n                }\n              );\n              return sql.fragment`(${query})`;\n            }, safeAlias);\n          },\n        };\n      });\n\n      return {\n        resolve(data, _args, _context, resolveInfo) {\n          const safeAlias = getSafeAliasFromResolveInfo(resolveInfo);\n          if (data.data == null) return null;\n          if (isListType) {\n            return data.data.map(d => (d != null ? d[safeAlias] : null));\n          } else {\n            return data.data[safeAlias];\n          }\n        },\n        ...fieldSpec,\n      };\n    },\n    fieldScope\n  );\n}\n"]}