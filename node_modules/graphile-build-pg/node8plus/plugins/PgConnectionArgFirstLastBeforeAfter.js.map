{"version":3,"sources":["../../src/plugins/PgConnectionArgFirstLastBeforeAfter.js"],"names":["base64Decode","str","Buffer","from","String","toString","PgConnectionArgs","builder","hook","args","build","context","extend","getTypeByName","graphql","GraphQLInt","scope","isPgFieldConnection","isPgFieldSimpleCollection","pgFieldIntrospection","source","addArgDataGenerator","field","Self","kind","Cursor","connectionFirstLastBeforeAfter","first","offset","last","after","before","pgQuery","queryBuilder","addCursorConstraint","Error","cursor","isAfter","cursorValues","JSON","parse","addCursorCondition","description","type","name"],"mappings":";;;;;;;AAGA,MAAMA,eAAeC,OAAOC,OAAOC,IAAP,CAAYC,OAAOH,GAAP,CAAZ,EAAyB,QAAzB,EAAmCI,QAAnC,CAA4C,MAA5C,CAA5B;;kBAEgB,SAASC,gBAAT,CAA0BC,OAA1B,EAAmC;AACjDA,UAAQC,IAAR,CACE,qCADF,EAEE,CAACC,IAAD,EAAOC,KAAP,EAAcC,OAAd,KAA0B;AACxB,UAAM;AACJC,YADI;AAEJC,mBAFI;AAGJC,eAAS,EAAEC,UAAF;AAHL,QAIFL,KAJJ;AAKA,UAAM;AACJM,aAAO;AACLC,2BADK;AAELC,iCAFK;AAGLC,8BAAsBC;AAHjB,OADH;AAMJC,yBANI;AAOJC,WAPI;AAQJC;AARI,QASFZ,OATJ;;AAWA,QACE,EAAEM,uBAAuBC,yBAAzB,KACA,CAACE,MADD,IAECA,OAAOI,IAAP,KAAgB,OAAhB,IAA2BJ,OAAOI,IAAP,KAAgB,WAH9C,EAIE;AACA,aAAOf,IAAP;AACD;AACD,UAAMgB,SAASZ,cAAc,QAAd,CAAf;;AAEAQ,wBAAoB,SAASK,8BAAT,CAAwC;AAC1DC,WAD0D;AAE1DC,YAF0D;AAG1DC,UAH0D;AAI1DC,WAJ0D;AAK1DC;AAL0D,KAAxC,EAMjB;AACD,aAAO;AACLC,iBAASC,gBAAgB;AACvB,cAAIN,SAAS,IAAb,EAAmB;AACjBM,yBAAaN,KAAb,CAAmBA,KAAnB;AACD;AACD,cAAIC,UAAU,IAAd,EAAoB;AAClBK,yBAAaL,MAAb,CAAoBA,MAApB;AACD;AACD,cAAIX,mBAAJ,EAAyB;AACvB,gBAAIa,SAAS,IAAb,EAAmB;AACjBI,kCAAoBJ,KAApB,EAA2B,IAA3B;AACD;AACD,gBAAIC,UAAU,IAAd,EAAoB;AAClBG,kCAAoBH,MAApB,EAA4B,KAA5B;AACD;AACD,gBAAIF,QAAQ,IAAZ,EAAkB;AAChB,kBAAIF,SAAS,IAAb,EAAmB;AACjB,sBAAM,IAAIQ,KAAJ,CACJ,8CADI,CAAN;AAGD;AACD,kBAAIP,UAAU,IAAd,EAAoB;AAClB,sBAAM,IAAIO,KAAJ,CACJ,+CADI,CAAN;AAGD;AACDF,2BAAaJ,IAAb,CAAkBA,IAAlB;AACD;AACF;;AAED,mBAASK,mBAAT,CAA6BE,MAA7B,EAAqCC,OAArC,EAA8C;AAC5C,kBAAMC,eAAeC,KAAKC,KAAL,CAAWxC,aAAaoC,MAAb,CAAX,CAArB;AACA,mBAAOH,aAAaQ,kBAAb,CAAgCH,YAAhC,EAA8CD,OAA9C,CAAP;AACD;AACF;AAlCI,OAAP;AAoCD,KA3CD;;AA6CA,WAAOzB,OACLH,IADK,EAEL;AACEkB,aAAO;AACLe,qBAAa,4CADR;AAELC,cAAM5B;AAFD,OADT;AAKE,UAAIE,sBACA;AACEY,cAAM;AACJa,uBAAa,2CADT;AAEJC,gBAAM5B;AAFF;AADR,OADA,GAOA,IAPJ,CALF;AAaEa,cAAQ;AACNc,qBAAazB,sBACT,4HADS,GAET,4BAHE;AAIN0B,cAAM5B;AAJA,OAbV;AAmBE,UAAIE,sBACA;AACEc,gBAAQ;AACNW,uBACE,wDAFI;AAGNC,gBAAMlB;AAHA,SADV;AAMEK,eAAO;AACLY,uBACE,uDAFG;AAGLC,gBAAMlB;AAHD;AANT,OADA,GAaA,IAbJ;AAnBF,KAFK,EAoCLR,sBACK,+CAA8CK,MAAMsB,IAAK,SACxDrB,KAAKqB,IACN,GAHL,GAIK,2CAA0CtB,MAAMsB,IAAK,SACpDrB,KAAKqB,IACN,GA1CA,CAAP;AA4CD,GArHH;AAuHD,C","file":"PgConnectionArgFirstLastBeforeAfter.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\n\nconst base64Decode = str => Buffer.from(String(str), \"base64\").toString(\"utf8\");\n\nexport default (function PgConnectionArgs(builder) {\n  builder.hook(\n    \"GraphQLObjectType:fields:field:args\",\n    (args, build, context) => {\n      const {\n        extend,\n        getTypeByName,\n        graphql: { GraphQLInt },\n      } = build;\n      const {\n        scope: {\n          isPgFieldConnection,\n          isPgFieldSimpleCollection,\n          pgFieldIntrospection: source,\n        },\n        addArgDataGenerator,\n        field,\n        Self,\n      } = context;\n\n      if (\n        !(isPgFieldConnection || isPgFieldSimpleCollection) ||\n        !source ||\n        (source.kind !== \"class\" && source.kind !== \"procedure\")\n      ) {\n        return args;\n      }\n      const Cursor = getTypeByName(\"Cursor\");\n\n      addArgDataGenerator(function connectionFirstLastBeforeAfter({\n        first,\n        offset,\n        last,\n        after,\n        before,\n      }) {\n        return {\n          pgQuery: queryBuilder => {\n            if (first != null) {\n              queryBuilder.first(first);\n            }\n            if (offset != null) {\n              queryBuilder.offset(offset);\n            }\n            if (isPgFieldConnection) {\n              if (after != null) {\n                addCursorConstraint(after, true);\n              }\n              if (before != null) {\n                addCursorConstraint(before, false);\n              }\n              if (last != null) {\n                if (first != null) {\n                  throw new Error(\n                    \"We don't support setting both first and last\"\n                  );\n                }\n                if (offset != null) {\n                  throw new Error(\n                    \"We don't support setting both offset and last\"\n                  );\n                }\n                queryBuilder.last(last);\n              }\n            }\n\n            function addCursorConstraint(cursor, isAfter) {\n              const cursorValues = JSON.parse(base64Decode(cursor));\n              return queryBuilder.addCursorCondition(cursorValues, isAfter);\n            }\n          },\n        };\n      });\n\n      return extend(\n        args,\n        {\n          first: {\n            description: \"Only read the first `n` values of the set.\",\n            type: GraphQLInt,\n          },\n          ...(isPgFieldConnection\n            ? {\n                last: {\n                  description: \"Only read the last `n` values of the set.\",\n                  type: GraphQLInt,\n                },\n              }\n            : null),\n          offset: {\n            description: isPgFieldConnection\n              ? \"Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`.\"\n              : \"Skip the first `n` values.\",\n            type: GraphQLInt,\n          },\n          ...(isPgFieldConnection\n            ? {\n                before: {\n                  description:\n                    \"Read all values in the set before (above) this cursor.\",\n                  type: Cursor,\n                },\n                after: {\n                  description:\n                    \"Read all values in the set after (below) this cursor.\",\n                  type: Cursor,\n                },\n              }\n            : null),\n        },\n        isPgFieldConnection\n          ? `Adding connection pagination args to field '${field.name}' of '${\n              Self.name\n            }'`\n          : `Adding simple collection args to field '${field.name}' of '${\n              Self.name\n            }'`\n      );\n    }\n  );\n}: Plugin);\n"]}