{"version":3,"sources":["../../src/plugins/PgOrderAllColumnsPlugin.js"],"names":["PgOrderAllColumnsPlugin","builder","hook","values","build","context","extend","pgColumnFilter","inflection","pgOmit","omit","describePgEntity","sqlCommentByAddingTags","scope","isPgRowSortEnum","pgIntrospection","table","kind","attributes","reduce","memo","attr","ascFieldName","orderByColumnEnum","descFieldName","value","alias","toLowerCase","specs","name"],"mappings":";;;;;;kBAGgB,SAASA,uBAAT,CAAiCC,OAAjC,EAA0C;AACxDA,UAAQC,IAAR,CAAa,wBAAb,EAAuC,CAACC,MAAD,EAASC,KAAT,EAAgBC,OAAhB,KAA4B;AACjE,UAAM;AACJC,YADI;AAEJC,oBAFI;AAGJC,gBAHI;AAIJC,cAAQC,IAJJ;AAKJC,sBALI;AAMJC;AANI,QAOFR,KAPJ;AAQA,UAAM;AACJS,aAAO,EAAEC,eAAF,EAAmBC,iBAAiBC,KAApC;AADH,QAEFX,OAFJ;AAGA,QAAI,CAACS,eAAD,IAAoB,CAACE,KAArB,IAA8BA,MAAMC,IAAN,KAAe,OAAjD,EAA0D;AACxD,aAAOd,MAAP;AACD;AACD,WAAOG,OACLH,MADK,EAELa,MAAME,UAAN,CAAiBC,MAAjB,CAAwB,CAACC,IAAD,EAAOC,IAAP,KAAgB;AACtC;AACA,UAAI,CAACd,eAAec,IAAf,EAAqBjB,KAArB,EAA4BC,OAA5B,CAAL,EAA2C,OAAOe,IAAP;AAC3C,UAAIV,KAAKW,IAAL,EAAW,OAAX,CAAJ,EAAyB,OAAOD,IAAP;;AAEzB,YAAME,eAAed,WAAWe,iBAAX,CAA6BF,IAA7B,EAAmC,IAAnC,CAArB;AACA,YAAMG,gBAAgBhB,WAAWe,iBAAX,CAA6BF,IAA7B,EAAmC,KAAnC,CAAtB;AACAD,aAAOd,OACLc,IADK,EAEL;AACE,SAACE,YAAD,GAAgB;AACdG,iBAAO;AACLC,mBAAOJ,aAAaK,WAAb,EADF;AAELC,mBAAO,CAAC,CAACP,KAAKQ,IAAN,EAAY,IAAZ,CAAD;AAFF;AADO;AADlB,OAFK,EAUJ,2CAA0ClB,iBACzCU,IADyC,CAEzC,0CAAyCT,uBACzCS,IADyC,EAEzC;AACEQ,cAAM;AADR,OAFyC,CAKzC,EAjBG,CAAP;AAmBAT,aAAOd,OACLc,IADK,EAEL;AACE,SAACI,aAAD,GAAiB;AACfC,iBAAO;AACLC,mBAAOF,cAAcG,WAAd,EADF;AAELC,mBAAO,CAAC,CAACP,KAAKQ,IAAN,EAAY,KAAZ,CAAD;AAFF;AADQ;AADnB,OAFK,EAUJ,4CAA2ClB,iBAC1CU,IAD0C,CAE1C,0CAAyCT,uBACzCS,IADyC,EAEzC;AACEQ,cAAM;AADR,OAFyC,CAKzC,EAjBG,CAAP;AAmBA,aAAOT,IAAP;AACD,KA9CD,EA8CG,EA9CH,CAFK,EAiDJ,mCAAkCJ,MAAMa,IAAK,GAjDzC,CAAP;AAmDD,GAlED;AAmED,C","file":"PgOrderAllColumnsPlugin.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\n\nexport default (function PgOrderAllColumnsPlugin(builder) {\n  builder.hook(\"GraphQLEnumType:values\", (values, build, context) => {\n    const {\n      extend,\n      pgColumnFilter,\n      inflection,\n      pgOmit: omit,\n      describePgEntity,\n      sqlCommentByAddingTags,\n    } = build;\n    const {\n      scope: { isPgRowSortEnum, pgIntrospection: table },\n    } = context;\n    if (!isPgRowSortEnum || !table || table.kind !== \"class\") {\n      return values;\n    }\n    return extend(\n      values,\n      table.attributes.reduce((memo, attr) => {\n        // PERFORMANCE: These used to be .filter(...) calls\n        if (!pgColumnFilter(attr, build, context)) return memo;\n        if (omit(attr, \"order\")) return memo;\n\n        const ascFieldName = inflection.orderByColumnEnum(attr, true);\n        const descFieldName = inflection.orderByColumnEnum(attr, false);\n        memo = extend(\n          memo,\n          {\n            [ascFieldName]: {\n              value: {\n                alias: ascFieldName.toLowerCase(),\n                specs: [[attr.name, true]],\n              },\n            },\n          },\n          `Adding ascending orderBy enum value for ${describePgEntity(\n            attr\n          )}. You can rename this field with:\\n\\n  ${sqlCommentByAddingTags(\n            attr,\n            {\n              name: \"newNameHere\",\n            }\n          )}`\n        );\n        memo = extend(\n          memo,\n          {\n            [descFieldName]: {\n              value: {\n                alias: descFieldName.toLowerCase(),\n                specs: [[attr.name, false]],\n              },\n            },\n          },\n          `Adding descending orderBy enum value for ${describePgEntity(\n            attr\n          )}. You can rename this field with:\\n\\n  ${sqlCommentByAddingTags(\n            attr,\n            {\n              name: \"newNameHere\",\n            }\n          )}`\n        );\n        return memo;\n      }, {}),\n      `Adding order values from table '${table.name}'`\n    );\n  });\n}: Plugin);\n"]}