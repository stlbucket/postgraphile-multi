{"version":3,"sources":["../../src/plugins/PgBasicsPlugin.js"],"names":["preventEmptyResult","sql","warn","defaultPgColumnFilter","_attr","_build","_context","identity","_","obj","Object","keys","reduce","memo","key","fn","args","result","apply","length","stringifiedArgs","require","inspect","Error","String","omitWithRBACChecks","omit","entity","permission","ORDINARY_TABLE","VIEW","MATERIALIZED_VIEW","isTableLike","kind","classKind","EXECUTE","aclExecutable","tableEntity","READ","ALL","MANY","aclSelectable","attributes","some","attr","CREATE","aclInsertable","UPDATE","aclUpdatable","DELETE","aclDeletable","class","attributeEntity","klass","FILTER","ORDER","omitUnindexed","isIndexed","type","enabled","describePgEntity","namespaceName","name","keyAttributes","map","a","join","includeAlias","getAlias","tags","value","endsWith","chalk","bold","t","c","f","p","r","v","m","e","console","error","id","sqlCommentByAddingTags","tagsToAdd","escape","str","replace","chr","assign","description","tagsSql","tag","tagValue","valueArray","Array","isArray","highlightOrNot","forEach","push","commentValue","sqlThing","identifier","PgBasicsPlugin","builder","pgStrictFunctions","pgColumnFilter","pgIgnoreRBAC","pgIgnoreIndexes","pgOmit","baseOmit","hook","build","extend","graphileBuildPgVersion","version","pgSql","pgQueryFromResolveData","queryFromResolveData","pgAddStartEndCursor","addStartEndCursor","pgMakeProcField","makeProcField","pgParseIdentifier","parseIdentifier","pgViaTemporaryTable","viaTemporaryTable","pgField","inflection","conditionType","typeName","upperCamelCase","inputType","rangeBoundType","rangeType","patchType","baseInputType","patchField","itemName","camelCase","orderByType","pluralize","edge","connection","_functionName","proc","_typeName","_tableName","table","_singularizedTableName","singularize","_columnName","_options","enumType","argument","index","orderByColumnEnum","ascending","columnName","skipRowId","constantCase","domainType","enumName","inValue","$","tableNode","tableFieldName","allRows","allRowsSimple","functionMutationName","functionMutationResultFieldName","gqlType","plural","outputArgNames","resultFieldName","returnTypeId","functionQueryName","functionQueryNameList","functionPayloadType","functionInputType","functionOutputFieldName","outputArgName","tableType","column","computedColumn","pseudoColumnName","_table","fieldName","computedColumnList","singleRelationByKeys","detailedKeys","_foreignTable","constraint","singleRelationByKeysBackwards","foreignSingleFieldName","foreignFieldName","manyRelationByKeys","manyRelationByKeysSimple","foreignSimpleFieldName","rowByUniqueKeys","updateByKeys","updateFieldName","deleteByKeys","deleteFieldName","updateByKeysInputType","deleteByKeysInputType","updateNode","deleteNode","updateNodeInputType","deleteNodeInputType","edgeField","recordFunctionReturnType","resultTypeName","recordFunctionConnection","recordFunctionEdge","scalarFunctionConnection","scalarFunctionEdge","createField","createInputType","createPayloadType","updatePayloadType","deletePayloadType"],"mappings":";;;;;QA6CgBA,kB,GAAAA,kB;;AA5ChB;;IAAYC,G;;AAEZ;;AASA;;;;AAEA;;;;AACA;;;;AACA;;;;AAWA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,MAAMC,OAAO,qBAAa,wBAAb,CAAb;;AAEA,MAAMC,wBAAwB,CAACC,KAAD,EAAQC,MAAR,EAAgBC,QAAhB,KAA6B,IAA3D;;;AAOA,MAAMC,WAAWC,KAAKA,CAAtB;;AAEO,SAASR,kBAAT,CAGLS,GAHK,EAG4B;AACjC,SAAOC,OAAOC,IAAP,CAAYF,GAAZ,EAAiBG,MAAjB,CAAwB,CAACC,IAAD,EAAOC,GAAP,KAAe;AAC5C,UAAMC,KAAKN,IAAIK,GAAJ,CAAX;AACAD,SAAKC,GAAL,IAAY,UAAS,GAAGE,IAAZ,EAAkB;AAC5B,YAAMC,SAASF,GAAGG,KAAH,CAAS,IAAT,EAAeF,IAAf,CAAf;AACA,UAAI,OAAOC,MAAP,KAAkB,QAAlB,IAA8BA,OAAOE,MAAP,KAAkB,CAApD,EAAuD;AACrD,cAAMC,kBAAkBC,QAAQ,MAAR,EAAgBC,OAAhB,CAAwBN,IAAxB,CAAxB;AACA,cAAM,IAAIO,KAAJ,CACH,kBAAiBT,GAAI,eAAcU,OAClCP,MADkC,CAElC,gCAFF,GAGG,wHAHH,GAIG,uBAAsBH,GAAI,MAAKM,eAAgB,EAL9C,CAAN;AAOD;AACD,aAAOH,MAAP;AACD,KAbD;AAcA,WAAOJ,IAAP;AACD,GAjBM,EAiBJ,EAjBI,CAAP;AAkBD;;AAED,MAAMY,qBAAqBC,QAAQ,CACjCC,MADiC,EAEjCC,UAFiC,KAG9B;AACH,QAAMC,iBAAiB,GAAvB;AACA,QAAMC,OAAO,GAAb;AACA,QAAMC,oBAAoB,GAA1B;AACA,QAAMC,cAAcL,UAClBA,UACAA,OAAOM,IAAP,KAAgB,OADhB,KAECN,OAAOO,SAAP,KAAqBL,cAArB,IACCF,OAAOO,SAAP,KAAqBJ,IADtB,IAECH,OAAOO,SAAP,KAAqBH,iBAJvB,CADF;AAMA,MAAIJ,OAAOM,IAAP,KAAgB,WAApB,EAAiC;AAC/B,QAAIL,eAAeO,aAAf,IAA0B,CAACR,OAAOS,aAAtC,EAAqD;AACnD,aAAO,IAAP;AACD;AACF,GAJD,MAIO,IAAIT,OAAOM,IAAP,KAAgB,OAAhB,IAA2BD,YAAYL,MAAZ,CAA/B,EAAoD;AACzD,UAAMU,cAAuBV,MAA7B;AACA,QACE,CAACC,eAAeU,UAAf,IAAuBV,eAAeW,SAAtC,IAA6CX,eAAeY,UAA7D,KACC,CAACH,YAAYI,aAAb,IACC,CAACJ,YAAYK,UAAZ,CAAuBC,IAAvB,CAA4BC,QAAQA,KAAKH,aAAzC,CAHL,EAIE;AACA,aAAO,IAAP;AACD,KAND,MAMO,IACLb,eAAeiB,YAAf,IACC,CAACR,YAAYS,aAAb,IACC,CAACT,YAAYK,UAAZ,CAAuBC,IAAvB,CAA4BC,QAAQA,KAAKE,aAAzC,CAHE,EAIL;AACA,aAAO,IAAP;AACD,KANM,MAMA,IACLlB,eAAemB,YAAf,IACC,CAACV,YAAYW,YAAb,IACC,CAACX,YAAYK,UAAZ,CAAuBC,IAAvB,CAA4BC,QAAQA,KAAKI,YAAzC,CAHE,EAIL;AACA,aAAO,IAAP;AACD,KANM,MAMA,IAAIpB,eAAeqB,YAAf,IAAyB,CAACZ,YAAYa,YAA1C,EAAwD;AAC7D,aAAO,IAAP;AACD;AACF,GAvBM,MAuBA,IAAIvB,OAAOM,IAAP,KAAgB,WAAhB,IAA+BD,YAAYL,OAAOwB,KAAnB,CAAnC,EAA8D;AACnE,UAAMC,kBAA+BzB,MAArC;;AAEA,UAAM0B,QAAQD,gBAAgBD,KAA9B;AACA;AACA,QACEE,MAAMZ,aAAN,IACAY,MAAMX,UAAN,CAAiBC,IAAjB,CAAsBC,QAAQA,KAAKH,aAAnC,CAFF,EAGE;AACA;AACA,UACE,CAACb,eAAeU,UAAf,IACCV,eAAe0B,YADhB,IAEC1B,eAAe2B,WAFjB,KAGA,CAACH,gBAAgBX,aAJnB,EAKE;AACA,eAAO,IAAP;AACD,OAPD,MAOO,IAAIb,eAAeiB,YAAf,IAAyB,CAACO,gBAAgBN,aAA9C,EAA6D;AAClE,eAAO,IAAP;AACD,OAFM,MAEA,IAAIlB,eAAemB,YAAf,IAAyB,CAACK,gBAAgBJ,YAA9C,EAA4D;AACjE,eAAO,IAAP;AACD;AACF,KAjBD,MAiBO;AACL;AACA;AACA;AACA;AACD;AACF;AACD,SAAOtB,KAAKC,MAAL,EAAaC,UAAb,CAAP;AACD,CAtED;;AAwEA,MAAM4B,gBAAgB9B,QAAQ,CAC5BC,MAD4B,EAE5BC,UAF4B,KAGzB;AACH,MACED,OAAOM,IAAP,KAAgB,WAAhB,IACA,CAACN,OAAO8B,SADR,KAEC7B,eAAe,QAAf,IAA2BA,eAAe,OAF3C,CADF,EAIE;AACA,WAAO,IAAP;AACD;AACD,MACED,OAAOM,IAAP,KAAgB,YAAhB,IACAN,OAAO+B,IAAP,KAAgB,GADhB,IAEA,CAAC/B,OAAO8B,SAFR,IAGA7B,eAAe,MAJjB,EAKE;AACA,QAAIyB,QAAQ1B,OAAOwB,KAAnB;AACA,QAAIE,KAAJ,EAAW;AACT,UAAInD,KAAKyD,OAAT,EAAkB;AAChBzD,aACE,IADF,EAEG,4CAA2C0D,iBAC1CjC,MAD0C,CAE1C,mJAAmJ,IACnJ0B,MAAMQ,aACP,MAAKR,MAAMS,IAAK,GAAG,KAAInC,OAAOoC,aAAP,CACrBC,GADqB,CACjBC,KAAKA,EAAEH,IADU,EAErBI,IAFqB,CAEhB,MAFgB,CAER,KARlB;AAUD;AACF;AACD,WAAO,IAAP;AACD;AACD,SAAOxC,KAAKC,MAAL,EAAaC,UAAb,CAAP;AACD,CAnCD;;AAqCA,SAASgC,gBAAT,CAA0BjC,MAA1B,EAA4CwC,eAAe,IAA3D,EAAiE;AAC/D,QAAMC,WAAW,CAACD,YAAD,GACb,MAAM,EADO,GAEb,MAAM;AACJ,UAAME,OAAO,sBACX1C,OAAO0C,IADI,EAEX,CAACC,KAAD,EAAQxD,GAAR,KAAgBA,QAAQ,MAAR,IAAkBA,IAAIyD,QAAJ,CAAa,MAAb,CAFvB,CAAb;AAIA,QAAI7D,OAAOC,IAAP,CAAY0D,IAAZ,EAAkBlD,MAAtB,EAA8B;AAC5B,aAAQ,0BAAyBqD,gBAAMC,IAAN,CAC/B/D,OAAOC,IAAP,CAAY0D,IAAZ,EACGL,GADH,CACOU,KAAM,IAAGA,CAAE,IAAGL,KAAKK,CAAL,CAAQ,EAD7B,EAEGR,IAFH,CAEQ,KAFR,CAD+B,CAI/B,GAJF;AAKD;AACD,WAAO,EAAP;AACD,GAfL;;AAiBA,MAAI;AACF,QAAIvC,OAAOM,IAAP,KAAgB,YAApB,EAAkC;AAChC,aAAQ,cAAauC,gBAAMC,IAAN,CAClB,IAAG9C,OAAOmC,IAAK,GADG,CAEnB,OAAMF,iBAAiBjC,OAAOwB,KAAxB,EAA+B,KAA/B,CAAsC,GAAEiB,UAAW,EAF3D;AAGD,KAJD,MAIO,IAAIzC,OAAOM,IAAP,KAAgB,OAApB,EAA6B;AAClC;AACA,YAAMA,OACJ;AACE0C,WAAG,gBADL;AAEEC,WAAG,eAFL;AAGEC,WAAG,mBAHL;AAIEC,WAAG,OAJL;AAKEC,WAAG,MALL;AAMEC,WAAG;AANL,QAOErD,OAAOO,SAPT,KAOuB,YARzB;AASA,aAAQ,GAAED,IAAK,IAAGuC,gBAAMC,IAAN,CACf,IAAG9C,OAAOkC,aAAc,MAAKlC,OAAOmC,IAAK,GAD1B,CAEhB,GAAEM,UAAW,EAFf;AAGD,KAdM,MAcA,IAAIzC,OAAOM,IAAP,KAAgB,WAApB,EAAiC;AACtC,aAAQ,YAAWuC,gBAAMC,IAAN,CAChB,IAAG9C,OAAOkC,aAAc,MAAKlC,OAAOmC,IAAK,eADzB,CAEjB,GAAEM,UAAW,EAFf;AAGD,KAJM,MAIA,IAAIzC,OAAOM,IAAP,KAAgB,WAApB,EAAiC;AACtC,aAAQ,UAASuC,gBAAMC,IAAN,CAAY,IAAG9C,OAAOmC,IAAK,GAA3B,CAA+B,OAAMF,iBACpDjC,OAAOwB,KAD6C,EAEpD,KAFoD,CAGpD,GAAEiB,UAAW,EAHf;AAID;AACF,GA7BD,CA6BE,OAAOa,CAAP,EAAU;AACV;AACAC,YAAQC,KAAR,CAAc,kDAAd,EAAkExD,MAAlE;AACA;AACAuD,YAAQC,KAAR,CAAcF,CAAd;AACD;AACD,SAAQ,mBAAkBtD,OAAOM,IAAK,UACpC,OAAON,OAAOyD,EAAd,KAAqB,QAArB,GAAiC,QAAOzD,OAAOyD,EAAG,GAAlD,GAAuD,EACxD,EAFD;AAGD;;AAED,SAASC,sBAAT,CAAgC1D,MAAhC,EAAwC2D,SAAxC,EAAmD;AACjD;AACA;AACA;;AAEA;AACA,QAAMC,SAASC,OACbA,IAAIC,OAAJ,CACE,kBADF,EAEEC,OACG;AACC,UAAM,KADP;AAEC,UAAM,KAFP;AAGC,UAAM,KAHP;AAIC,UAAM,KAJP;AAKC,UAAM;AALP,KAMCA,GAND,KAMS,OAAOA,GATrB,CADF;;AAaA;AACA,QAAMrB,OAAO3D,OAAOiF,MAAP,CAAc,EAAd,EAAkBL,SAAlB,EAA6B3D,OAAO0C,IAApC,EAA0CiB,SAA1C,CAAb;;AAEA,QAAMM,cAAcjE,OAAOiE,WAA3B;AACA,QAAMC,UAAUnF,OAAOC,IAAP,CAAY0D,IAAZ,EACbzD,MADa,CACN,CAACC,IAAD,EAAOiF,GAAP,KAAe;AACrB,UAAMC,WAAW1B,KAAKyB,GAAL,CAAjB;AACA,UAAME,aAAaC,MAAMC,OAAN,CAAcH,QAAd,IAA0BA,QAA1B,GAAqC,CAACA,QAAD,CAAxD;AACA,UAAMI,iBAAiBL,OAAOR,SAAP,GAAmBd,gBAAMC,IAAzB,GAAgClE,QAAvD;AACAyF,eAAWI,OAAX,CAAmB9B,SAAS;AAC1BzD,WAAKwF,IAAL,CACEF,eACG,IAAGZ,OAAOA,OAAOO,GAAP,CAAP,CAAoB,GACtBxB,UAAU,IAAV,GAAiB,EAAjB,GAAsB,MAAMiB,OAAOA,OAAOjB,KAAP,CAAP,CAC7B,EAHH,CADF;AAOD,KARD;AASA,WAAOzD,IAAP;AACD,GAfa,EAeX,EAfW,EAgBbqD,IAhBa,CAgBR,KAhBQ,CAAhB;AAiBA,QAAMoC,eAAgB,KAAIT,OAAQ,GAChCD,cAAc,QAAQL,OAAOK,WAAP,CAAtB,GAA4C,EAC7C,GAFD;AAGA,MAAIW,QAAJ;AACA,MAAI5E,OAAOM,IAAP,KAAgB,OAApB,EAA6B;AAC3B,UAAMuE,aAAc,IAAG7E,OAAOkC,aAAc,MAAKlC,OAAOmC,IAAK,GAA7D;AACA,QAAInC,OAAOO,SAAP,KAAqB,GAAzB,EAA8B;AAC5BqE,iBAAY,SAAQC,UAAW,EAA/B;AACD,KAFD,MAEO,IAAI7E,OAAOO,SAAP,KAAqB,GAAzB,EAA8B;AACnCqE,iBAAY,QAAOC,UAAW,EAA9B;AACD,KAFM,MAEA,IAAI7E,OAAOO,SAAP,KAAqB,GAAzB,EAA8B;AACnCqE,iBAAY,qBAAoBC,UAAW,EAA3C;AACD,KAFM,MAEA;AACLD,iBAAY,0CAAyCC,UAAW,EAAhE;AACD;AACF,GAXD,MAWO,IAAI7E,OAAOM,IAAP,KAAgB,WAApB,EAAiC;AACtCsE,eAAY,WAAU5E,OAAOwB,KAAP,CAAaU,aAAc,MAC/ClC,OAAOwB,KAAP,CAAaW,IACd,MAAKnC,OAAOmC,IAAK,GAFlB;AAGD,GAJM,MAIA,IAAInC,OAAOM,IAAP,KAAgB,WAApB,EAAiC;AACtCsE,eAAY,aAAY5E,OAAOkC,aAAc,MAC3ClC,OAAOmC,IACR,4BAFD;AAGD,GAJM,MAIA,IAAInC,OAAOM,IAAP,KAAgB,YAApB,EAAkC;AACvC;AACAsE,eAAY,eAAc5E,OAAOmC,IAAK,SACpCnC,OAAOwB,KAAP,CAAaU,aACd,MAAKlC,OAAOwB,KAAP,CAAaW,IAAK,GAFxB;AAGD,GALM,MAKA;AACLyC,eAAY,2CAAZ;AACD;;AAED,SAAQ,cAAaA,QAAS,OAAMD,YAAa,GAAjD;AACD;;kBAEe,SAASG,cAAT,CACdC,OADc,EAEd;AACEC,sBAAoB,KADtB;AAEEC,mBAAiBzG,qBAFnB;AAGE0G,iBAAe,KAHjB;AAIEC,oBAAkB,IAJpB,CAI0B;AAJ1B,CAFc,EAQd;AACA,MAAIC,SAASC,cAAb;AACA,MAAI,CAACH,YAAL,EAAmB;AACjBE,aAAStF,mBAAmBsF,MAAnB,CAAT;AACD;AACD,MAAI,CAACD,eAAL,EAAsB;AACpBC,aAASvD,cAAcuD,MAAd,CAAT;AACD;AACDL,UAAQO,IAAR,CAAa,OAAb,EAAsBC,SAAS;AAC7B,WAAOA,MAAMC,MAAN,CAAaD,KAAb,EAAoB;AACzBE,8BAAwBC,gBADC;AAEzBC,aAAOrH,GAFkB;AAGzB0G,uBAHyB;AAIzBC,oBAJyB;AAKzBW,8BAAwBC,8BALC;AAMzBC,2BAAqBC,2BANI;AAOzBX,YAPyB;AAQzBY,uBAAiBC,uBARQ;AASzBC,yBAAmBC,yBATM;AAUzBC,2BAAqBC,2BAVI;AAWzBpE,sBAXyB;AAYzBqE,gCAZyB;AAazB5C;AAbyB,KAApB,CAAP;AAeD,GAhBD;;AAkBAqB,UAAQO,IAAR,CAAa,YAAb,EAA2B,CAACiB,UAAD,EAAahB,KAAb,KAAuB;AAChD,WAAOA,MAAMC,MAAN,CACLe,UADK,EAELlI,mBAAmB;AACjB;AACAmI,oBAAcC,QAAd,EAAgC;AAC9B,eAAO,KAAKC,cAAL,CAAqB,GAAED,QAAS,YAAhC,CAAP;AACD,OAJgB;AAKjBE,gBAAUF,QAAV,EAA4B;AAC1B,eAAO,KAAKC,cAAL,CAAqB,GAAED,QAAS,QAAhC,CAAP;AACD,OAPgB;AAQjBG,qBAAeH,QAAf,EAAiC;AAC/B,eAAO,KAAKC,cAAL,CAAqB,GAAED,QAAS,cAAhC,CAAP;AACD,OAVgB;AAWjBI,gBAAUJ,QAAV,EAA4B;AAC1B,eAAO,KAAKC,cAAL,CAAqB,GAAED,QAAS,QAAhC,CAAP;AACD,OAbgB;AAcjBK,gBAAUL,QAAV,EAA4B;AAC1B,eAAO,KAAKC,cAAL,CAAqB,GAAED,QAAS,QAAhC,CAAP;AACD,OAhBgB;AAiBjBM,oBAAcN,QAAd,EAAgC;AAC9B,eAAO,KAAKC,cAAL,CAAqB,GAAED,QAAS,aAAhC,CAAP;AACD,OAnBgB;AAoBjBO,iBAAWC,QAAX,EAA6B;AAC3B,eAAO,KAAKC,SAAL,CAAgB,GAAED,QAAS,QAA3B,CAAP;AACD,OAtBgB;AAuBjBE,kBAAYV,QAAZ,EAA8B;AAC5B,eAAO,KAAKC,cAAL,CAAqB,GAAE,KAAKU,SAAL,CAAeX,QAAf,CAAyB,WAAhD,CAAP;AACD,OAzBgB;AA0BjBY,WAAKZ,QAAL,EAAuB;AACrB,eAAO,KAAKC,cAAL,CAAqB,GAAE,KAAKU,SAAL,CAAeX,QAAf,CAAyB,OAAhD,CAAP;AACD,OA5BgB;AA6BjBa,iBAAWb,QAAX,EAA6B;AAC3B,eAAO,KAAKC,cAAL,CAAqB,GAAE,KAAKU,SAAL,CAAeX,QAAf,CAAyB,aAAhD,CAAP;AACD,OA/BgB;;AAiCjB;AACA;AACA;AACA;AACA;AACA;AACAc,oBAAcC,IAAd,EAA4B;AAC1B,eAAOA,KAAK9E,IAAL,CAAUP,IAAV,IAAkBqF,KAAKrF,IAA9B;AACD,OAzCgB;AA0CjBsF,gBAAU1F,IAAV,EAAwB;AACtB;AACA,eAAOA,KAAKW,IAAL,CAAUP,IAAV,IAAkBJ,KAAKI,IAA9B;AACD,OA7CgB;AA8CjBuF,iBAAWC,KAAX,EAA2B;AACzB,eAAOA,MAAMjF,IAAN,CAAWP,IAAX,IAAmBwF,MAAM5F,IAAN,CAAWW,IAAX,CAAgBP,IAAnC,IAA2CwF,MAAMxF,IAAxD;AACD,OAhDgB;AAiDjByF,6BAAuBD,KAAvB,EAA+C;AAC7C,eAAO,KAAKE,WAAL,CAAiB,KAAKH,UAAL,CAAgBC,KAAhB,CAAjB,EAAyC7D,OAAzC,CACL,uCADK,EAEL,WAFK,CAAP;AAID,OAtDgB;AAuDjBgE,kBAAY7G,IAAZ,EAA+B8G,QAA/B,EAAmE;AACjE,eAAO9G,KAAKyB,IAAL,CAAUP,IAAV,IAAkBlB,KAAKkB,IAA9B;AACD,OAzDgB;;AA2DjB;AACA6F,eAASjG,IAAT,EAAuB;AACrB,eAAO,KAAK2E,cAAL,CAAoB,KAAKe,SAAL,CAAe1F,IAAf,CAApB,CAAP;AACD,OA9DgB;AA+DjBkG,eAAS9F,IAAT,EAAwB+F,KAAxB,EAAuC;AACrC,eAAO,KAAKhB,SAAL,CAAe/E,QAAS,MAAK+F,KAAM,EAAnC,CAAP;AACD,OAjEgB;AAkEjBC,wBAAkBlH,IAAlB,EAAqCmH,SAArC,EAAyD;AACvD,cAAMC,aAAa,KAAKP,WAAL,CAAiB7G,IAAjB,EAAuB;AACxCqH,qBAAW,IAD6B,CACvB;AADuB,SAAvB,CAAnB;AAGA,eAAO,KAAKC,YAAL,CACJ,GAAEF,UAAW,IAAGD,YAAY,KAAZ,GAAoB,MAAO,EADvC,CAAP;AAGD,OAzEgB;AA0EjBI,iBAAWzG,IAAX,EAAyB;AACvB,eAAO,KAAK2E,cAAL,CAAoB,KAAKe,SAAL,CAAe1F,IAAf,CAApB,CAAP;AACD,OA5EgB;AA6EjB0G,eAASC,OAAT,EAA0B;AACxB,YAAI/F,QAAQ+F,OAAZ;;AAEA,YAAI/F,UAAU,EAAd,EAAkB;AAChB,iBAAO,SAAP;AACD;;AAED;AACA;AACA;AACA;AACAA,gBAAQA,MACLmB,OADK,CACG,KADH,EACU,YADV,EAELA,OAFK,CAEG,iBAFH,EAEsB,YAFtB,EAGLA,OAHK,CAGG,kBAHH,EAGuB,YAHvB,CAAR;;AAKA;AACA;AACA;AACA;AACA;AACAnB,gBACE;AACE;AACA,eAAK,cAFP;AAGE,gBAAM,uBAHR;AAIE,eAAK,OAJP;AAKE,gBAAM,WALR;AAME,gBAAM,WANR;AAOE,gBAAM,oBAPR;AAQE,eAAK,WARP;;AAUE;AACA,gBAAM,MAXR;AAYE,iBAAO,OAZT;AAaE,iBAAO,UAbT;AAcE,kBAAQ,WAdV;;AAgBE;AACA;AACA;AACA,eAAK,OAnBP;AAoBE,gBAAM,gBApBR;AAqBE,gBAAM,WArBR;AAsBE,iBAAO,oBAtBT;;AAwBE;AACA;AACA;AACA;AACA,eAAK,SA5BP;AA6BE,eAAK,MA7BP;AA8BE,eAAK,OA9BP;AA+BE,eAAK,OA/BP;AAgCE,gBAAM,WAhCR;AAiCE9D,aAAG,YAjCL;AAkCE,eAAK,OAlCP;AAmCE,eAAK,UAnCP;AAoCE8J,aAAG,QApCL;AAqCE,eAAK,WArCP;AAsCE,eAAK,IAtCP;AAuCE,eAAK,YAvCP;AAwCE,eAAK,OAxCP;AAyCE,eAAK,UAzCP;AA0CE,eAAK,OA1CP;AA2CE,eAAK,WA3CP;AA4CE,eAAK,mBA5CP;AA6CE,eAAK,eA7CP;AA8CE,eAAK,OA9CP;AA+CE,eAAK,KA/CP;AAgDE,eAAK,OAhDP;AAiDE,eAAK,KAjDP;AAkDE,eAAK,cAlDP;AAmDE,eAAK,eAnDP;AAoDE,eAAK,kBApDP;AAqDE,eAAK,mBArDP;AAsDE,eAAK,YAtDP;AAuDE,eAAK;AAvDP,UAwDEhG,KAxDF,KAwDYA,KAzDd;AA0DA,eAAOA,KAAP;AACD,OA7JgB;;AA+JjBiG,gBAAUjB,KAAV,EAA0B;AACxB,eAAO,KAAKT,SAAL,CAAe,KAAKU,sBAAL,CAA4BD,KAA5B,CAAf,CAAP;AACD,OAjKgB;AAkKjBkB,qBAAelB,KAAf,EAA+B;AAC7B,eAAO,KAAKT,SAAL,CAAe,KAAKU,sBAAL,CAA4BD,KAA5B,CAAf,CAAP;AACD,OApKgB;AAqKjBmB,cAAQnB,KAAR,EAAwB;AACtB,eAAO,KAAKT,SAAL,CACJ,OAAM,KAAKE,SAAL,CAAe,KAAKQ,sBAAL,CAA4BD,KAA5B,CAAf,CAAmD,EADrD,CAAP;AAGD,OAzKgB;AA0KjBoB,oBAAcpB,KAAd,EAA8B;AAC5B,eAAO,KAAKT,SAAL,CACJ,OAAM,KAAKE,SAAL,CAAe,KAAKQ,sBAAL,CAA4BD,KAA5B,CAAf,CAAmD,OADrD,CAAP;AAGD,OA9KgB;AA+KjBqB,2BAAqBxB,IAArB,EAAmC;AACjC,eAAO,KAAKN,SAAL,CAAe,KAAKK,aAAL,CAAmBC,IAAnB,CAAf,CAAP;AACD,OAjLgB;AAkLjByB,sCACEzB,IADF,EAEE0B,OAFF,EAGEC,SAAkB,KAHpB,EAIEC,iBAAgC,EAJlC,EAKE;AACA,YAAI5B,KAAK9E,IAAL,CAAU2G,eAAd,EAA+B;AAC7B,iBAAO7B,KAAK9E,IAAL,CAAU2G,eAAjB;AACD;AACD,YAAIlH,IAAJ;AACA,YAAIiH,eAAe5J,MAAf,KAA0B,CAA1B,IAA+B4J,eAAe,CAAf,MAAsB,EAAzD,EAA6D;AAC3DjH,iBAAO,KAAK+E,SAAL,CAAekC,eAAe,CAAf,CAAf,CAAP;AACD,SAFD,MAEO,IAAIF,QAAQ/G,IAAR,KAAiB,KAArB,EAA4B;AACjCA,iBAAO,SAAP;AACD,SAFM,MAEA,IAAI+G,QAAQ/G,IAAR,KAAiB,OAArB,EAA8B;AACnCA,iBAAO,OAAP;AACD,SAFM,MAEA,IAAI+G,QAAQ/G,IAAR,KAAiB,SAArB,EAAgC;AACrCA,iBAAO,SAAP;AACD,SAFM,MAEA,IAAI+G,QAAQ/G,IAAR,KAAiB,QAArB,EAA+B;AACpCA,iBAAO,QAAP;AACD,SAFM,MAEA,IAAIqF,KAAK8B,YAAL,KAAsB,MAA1B,EAAkC;AACvC;AACAnH,iBAAO,QAAP;AACD,SAHM,MAGA;AACLA,iBAAO,KAAK+E,SAAL,CAAegC,QAAQ/G,IAAvB,CAAP;AACD;AACD,eAAOgH,SAAS,KAAK/B,SAAL,CAAejF,IAAf,CAAT,GAAgCA,IAAvC;AACD,OA7MgB;AA8MjBoH,wBAAkB/B,IAAlB,EAAgC;AAC9B,eAAO,KAAKN,SAAL,CAAe,KAAKK,aAAL,CAAmBC,IAAnB,CAAf,CAAP;AACD,OAhNgB;AAiNjBgC,4BAAsBhC,IAAtB,EAAoC;AAClC,eAAO,KAAKN,SAAL,CAAgB,GAAE,KAAKK,aAAL,CAAmBC,IAAnB,CAAyB,OAA3C,CAAP;AACD,OAnNgB;AAoNjBiC,0BAAoBjC,IAApB,EAAkC;AAChC,eAAO,KAAKd,cAAL,CAAqB,GAAE,KAAKa,aAAL,CAAmBC,IAAnB,CAAyB,UAAhD,CAAP;AACD,OAtNgB;AAuNjBkC,wBAAkBlC,IAAlB,EAAgC;AAC9B,eAAO,KAAKd,cAAL,CAAqB,GAAE,KAAKa,aAAL,CAAmBC,IAAnB,CAAyB,QAAhD,CAAP;AACD,OAzNgB;AA0NjBmC,8BACEnC,IADF,EAEEoC,aAFF,EAGE1B,KAHF,EAIE;AACA,eAAO,KAAKD,QAAL,CAAc2B,aAAd,EAA6B1B,KAA7B,CAAP;AACD,OAhOgB;AAiOjB2B,gBAAUlC,KAAV,EAA0B;AACxB,eAAO,KAAKjB,cAAL,CAAoB,KAAKkB,sBAAL,CAA4BD,KAA5B,CAApB,CAAP;AACD,OAnOgB;AAoOjBmC,aAAO7I,IAAP,EAA0B;AACxB,eAAO,KAAKiG,SAAL,CAAe,KAAKY,WAAL,CAAiB7G,IAAjB,CAAf,CAAP;AACD,OAtOgB;AAuOjB8I,qBACEC,gBADF,EAEExC,IAFF,EAGEyC,MAHF,EAIE;AACA,eAAOzC,KAAK9E,IAAL,CAAUwH,SAAV,IAAuB,KAAKhD,SAAL,CAAe8C,gBAAf,CAA9B;AACD,OA7OgB;AA8OjBG,yBACEH,gBADF,EAEExC,IAFF,EAGEyC,MAHF,EAIE;AACA,eAAOzC,KAAK9E,IAAL,CAAUwH,SAAV,GACH1C,KAAK9E,IAAL,CAAUwH,SAAV,GAAsB,MADnB,GAEH,KAAKhD,SAAL,CAAgB,GAAE8C,gBAAiB,OAAnC,CAFJ;AAGD,OAtPgB;AAuPjBI,2BACEC,YADF,EAEE1C,KAFF,EAGE2C,aAHF,EAIEC,UAJF,EAKE;AACA,YAAIA,WAAW7H,IAAX,CAAgBwH,SAApB,EAA+B;AAC7B,iBAAOK,WAAW7H,IAAX,CAAgBwH,SAAvB;AACD;AACD,eAAO,KAAKhD,SAAL,CACJ,GAAE,KAAKU,sBAAL,CAA4BD,KAA5B,CAAmC,OAAM0C,aACzChI,GADyC,CACrClD,OAAO,KAAK2K,MAAL,CAAY3K,GAAZ,CAD8B,EAEzCoD,IAFyC,CAEpC,OAFoC,CAE3B,EAHZ,CAAP;AAKD,OArQgB;AAsQjBiI,oCACEH,YADF,EAEE1C,KAFF,EAGE2C,aAHF,EAIEC,UAJF,EAKE;AACA,YAAIA,WAAW7H,IAAX,CAAgB+H,sBAApB,EAA4C;AAC1C,iBAAOF,WAAW7H,IAAX,CAAgB+H,sBAAvB;AACD;AACD,YAAIF,WAAW7H,IAAX,CAAgBgI,gBAApB,EAAsC;AACpC,iBAAOH,WAAW7H,IAAX,CAAgBgI,gBAAvB;AACD;AACD,eAAO,KAAKN,oBAAL,CACLC,YADK,EAEL1C,KAFK,EAGL2C,aAHK,EAILC,UAJK,CAAP;AAMD,OAxRgB;AAyRjBI,yBACEN,YADF,EAEE1C,KAFF,EAGE2C,aAHF,EAIEC,UAJF,EAKE;AACA,YAAIA,WAAW7H,IAAX,CAAgBgI,gBAApB,EAAsC;AACpC,iBAAOH,WAAW7H,IAAX,CAAgBgI,gBAAvB;AACD;AACD,eAAO,KAAKxD,SAAL,CACJ,GAAE,KAAKE,SAAL,CACD,KAAKQ,sBAAL,CAA4BD,KAA5B,CADC,CAED,OAAM0C,aAAahI,GAAb,CAAiBlD,OAAO,KAAK2K,MAAL,CAAY3K,GAAZ,CAAxB,EAA0CoD,IAA1C,CAA+C,OAA/C,CAAwD,EAH3D,CAAP;AAKD,OAvSgB;AAwSjBqI,+BACEP,YADF,EAEE1C,KAFF,EAGE2C,aAHF,EAIEC,UAJF,EAKE;AACA,YAAIA,WAAW7H,IAAX,CAAgBmI,sBAApB,EAA4C;AAC1C,iBAAON,WAAW7H,IAAX,CAAgBmI,sBAAvB;AACD;AACD,YAAIN,WAAW7H,IAAX,CAAgBgI,gBAApB,EAAsC;AACpC,iBAAOH,WAAW7H,IAAX,CAAgBgI,gBAAvB;AACD;AACD,eAAO,KAAKxD,SAAL,CACJ,GAAE,KAAKE,SAAL,CACD,KAAKQ,sBAAL,CAA4BD,KAA5B,CADC,CAED,OAAM0C,aACLhI,GADK,CACDlD,OAAO,KAAK2K,MAAL,CAAY3K,GAAZ,CADN,EAELoD,IAFK,CAEA,OAFA,CAES,OALZ,CAAP;AAOD,OA3TgB;AA4TjBuI,sBACET,YADF,EAEE1C,KAFF,EAGE4C,UAHF,EAIE;AACA,YAAIA,WAAW7H,IAAX,CAAgBwH,SAApB,EAA+B;AAC7B,iBAAOK,WAAW7H,IAAX,CAAgBwH,SAAvB;AACD;AACD,eAAO,KAAKhD,SAAL,CACJ,GAAE,KAAKU,sBAAL,CAA4BD,KAA5B,CAAmC,OAAM0C,aACzChI,GADyC,CACrClD,OAAO,KAAK2K,MAAL,CAAY3K,GAAZ,CAD8B,EAEzCoD,IAFyC,CAEpC,OAFoC,CAE3B,EAHZ,CAAP;AAKD,OAzUgB;AA0UjBwI,mBACEV,YADF,EAEE1C,KAFF,EAGE4C,UAHF,EAIE;AACA,YAAIA,WAAW7H,IAAX,CAAgBsI,eAApB,EAAqC;AACnC,iBAAOT,WAAW7H,IAAX,CAAgBsI,eAAvB;AACD;AACD,eAAO,KAAK9D,SAAL,CACJ,UAAS,KAAKU,sBAAL,CAA4BD,KAA5B,CAAmC,OAAM0C,aAChDhI,GADgD,CAC5ClD,OAAO,KAAK2K,MAAL,CAAY3K,GAAZ,CADqC,EAEhDoD,IAFgD,CAE3C,OAF2C,CAElC,EAHZ,CAAP;AAKD,OAvVgB;AAwVjB0I,mBACEZ,YADF,EAEE1C,KAFF,EAGE4C,UAHF,EAIE;AACA,YAAIA,WAAW7H,IAAX,CAAgBwI,eAApB,EAAqC;AACnC,iBAAOX,WAAW7H,IAAX,CAAgBwI,eAAvB;AACD;AACD,eAAO,KAAKhE,SAAL,CACJ,UAAS,KAAKU,sBAAL,CAA4BD,KAA5B,CAAmC,OAAM0C,aAChDhI,GADgD,CAC5ClD,OAAO,KAAK2K,MAAL,CAAY3K,GAAZ,CADqC,EAEhDoD,IAFgD,CAE3C,OAF2C,CAElC,EAHZ,CAAP;AAKD,OArWgB;AAsWjB4I,4BACEd,YADF,EAEE1C,KAFF,EAGE4C,UAHF,EAIE;AACA,YAAIA,WAAW7H,IAAX,CAAgBsI,eAApB,EAAqC;AACnC,iBAAO,KAAKtE,cAAL,CACJ,GAAE6D,WAAW7H,IAAX,CAAgBsI,eAAgB,QAD9B,CAAP;AAGD;AACD,eAAO,KAAKtE,cAAL,CACJ,UAAS,KAAKkB,sBAAL,CAA4BD,KAA5B,CAAmC,OAAM0C,aAChDhI,GADgD,CAC5ClD,OAAO,KAAK2K,MAAL,CAAY3K,GAAZ,CADqC,EAEhDoD,IAFgD,CAE3C,OAF2C,CAElC,QAHZ,CAAP;AAKD,OArXgB;AAsXjB6I,4BACEf,YADF,EAEE1C,KAFF,EAGE4C,UAHF,EAIE;AACA,YAAIA,WAAW7H,IAAX,CAAgBwI,eAApB,EAAqC;AACnC,iBAAO,KAAKxE,cAAL,CACJ,GAAE6D,WAAW7H,IAAX,CAAgBwI,eAAgB,QAD9B,CAAP;AAGD;AACD,eAAO,KAAKxE,cAAL,CACJ,UAAS,KAAKkB,sBAAL,CAA4BD,KAA5B,CAAmC,OAAM0C,aAChDhI,GADgD,CAC5ClD,OAAO,KAAK2K,MAAL,CAAY3K,GAAZ,CADqC,EAEhDoD,IAFgD,CAE3C,OAF2C,CAElC,QAHZ,CAAP;AAKD,OArYgB;AAsYjB8I,iBAAW1D,KAAX,EAA2B;AACzB,eAAO,KAAKT,SAAL,CAAgB,UAAS,KAAKU,sBAAL,CAA4BD,KAA5B,CAAmC,EAA5D,CAAP;AACD,OAxYgB;AAyYjB2D,iBAAW3D,KAAX,EAA2B;AACzB,eAAO,KAAKT,SAAL,CAAgB,UAAS,KAAKU,sBAAL,CAA4BD,KAA5B,CAAmC,EAA5D,CAAP;AACD,OA3YgB;AA4YjB4D,0BAAoB5D,KAApB,EAAoC;AAClC,eAAO,KAAKjB,cAAL,CACJ,UAAS,KAAKkB,sBAAL,CAA4BD,KAA5B,CAAmC,QADxC,CAAP;AAGD,OAhZgB;AAiZjB6D,0BAAoB7D,KAApB,EAAoC;AAClC,eAAO,KAAKjB,cAAL,CACJ,UAAS,KAAKkB,sBAAL,CAA4BD,KAA5B,CAAmC,QADxC,CAAP;AAGD,OArZgB;AAsZjB8D,gBAAU9D,KAAV,EAA0B;AACxB,eAAO,KAAKT,SAAL,CAAgB,GAAE,KAAKU,sBAAL,CAA4BD,KAA5B,CAAmC,OAArD,CAAP;AACD,OAxZgB;AAyZjB+D,+BAAyBlE,IAAzB,EAAuC;AACrC,eACEA,KAAK9E,IAAL,CAAUiJ,cAAV,IACA,KAAKjF,cAAL,CAAqB,GAAE,KAAKa,aAAL,CAAmBC,IAAnB,CAAyB,SAAhD,CAFF;AAID,OA9ZgB;AA+ZjBoE,+BAAyBpE,IAAzB,EAAuC;AACrC,eAAO,KAAKd,cAAL,CAAqB,GAAE,KAAKa,aAAL,CAAmBC,IAAnB,CAAyB,aAAhD,CAAP;AACD,OAjagB;AAkajBqE,yBAAmBrE,IAAnB,EAAiC;AAC/B,eAAO,KAAKd,cAAL,CACJ,GAAE,KAAKmB,WAAL,CAAiB,KAAKN,aAAL,CAAmBC,IAAnB,CAAjB,CAA2C,OADzC,CAAP;AAGD,OAtagB;AAuajBsE,+BAAyBtE,IAAzB,EAAuC;AACrC,eAAO,KAAKd,cAAL,CAAqB,GAAE,KAAKa,aAAL,CAAmBC,IAAnB,CAAyB,aAAhD,CAAP;AACD,OAzagB;AA0ajBuE,yBAAmBvE,IAAnB,EAAiC;AAC/B,eAAO,KAAKd,cAAL,CACJ,GAAE,KAAKmB,WAAL,CAAiB,KAAKN,aAAL,CAAmBC,IAAnB,CAAjB,CAA2C,OADzC,CAAP;AAGD,OA9agB;AA+ajBwE,kBAAYrE,KAAZ,EAA4B;AAC1B,eAAO,KAAKT,SAAL,CAAgB,UAAS,KAAKU,sBAAL,CAA4BD,KAA5B,CAAmC,EAA5D,CAAP;AACD,OAjbgB;AAkbjBsE,sBAAgBtE,KAAhB,EAAgC;AAC9B,eAAO,KAAKjB,cAAL,CACJ,UAAS,KAAKkB,sBAAL,CAA4BD,KAA5B,CAAmC,QADxC,CAAP;AAGD,OAtbgB;AAubjBuE,wBAAkBvE,KAAlB,EAAkC;AAChC,eAAO,KAAKjB,cAAL,CACJ,UAAS,KAAKkB,sBAAL,CAA4BD,KAA5B,CAAmC,UADxC,CAAP;AAGD,OA3bgB;AA4bjBwE,wBAAkBxE,KAAlB,EAAkC;AAChC,eAAO,KAAKjB,cAAL,CACJ,UAAS,KAAKkB,sBAAL,CAA4BD,KAA5B,CAAmC,UADxC,CAAP;AAGD,OAhcgB;AAicjByE,wBAAkBzE,KAAlB,EAAkC;AAChC,eAAO,KAAKjB,cAAL,CACJ,UAAS,KAAKkB,sBAAL,CAA4BD,KAA5B,CAAmC,UADxC,CAAP;AAGD;AArcgB,KAAnB,CAFK,EAycL,2GAzcK,CAAP;AA2cD,GA5cD;AA6cD,C","file":"PgBasicsPlugin.js","sourcesContent":["// @flow\nimport * as sql from \"pg-sql2\";\nimport type { Plugin } from \"graphile-build\";\nimport { version } from \"../../package.json\";\nimport type {\n  PgProc,\n  PgType,\n  PgClass,\n  PgAttribute,\n  PgConstraint,\n  PgEntity,\n} from \"./PgIntrospectionPlugin\";\nimport pgField from \"./pgField\";\n\nimport queryFromResolveData from \"../queryFromResolveData\";\nimport addStartEndCursor from \"./addStartEndCursor\";\nimport baseOmit, {\n  CREATE,\n  READ,\n  UPDATE,\n  DELETE,\n  ALL,\n  MANY,\n  ORDER,\n  FILTER,\n  EXECUTE,\n} from \"../omit\";\nimport makeProcField from \"./makeProcField\";\nimport parseIdentifier from \"../parseIdentifier\";\nimport viaTemporaryTable from \"./viaTemporaryTable\";\nimport chalk from \"chalk\";\nimport pickBy from \"lodash/pickBy\";\nimport debugFactory from \"debug\";\n\nconst warn = debugFactory(\"graphile-build-pg:warn\");\n\nconst defaultPgColumnFilter = (_attr, _build, _context) => true;\ntype Keys = Array<{\n  column: string,\n  table: string,\n  schema: ?string,\n}>;\n\nconst identity = _ => _;\n\nexport function preventEmptyResult<\n  // eslint-disable-next-line flowtype/no-weak-types\n  O: { [key: string]: (...args: Array<any>) => string }\n>(obj: O): $ObjMap<O, <V>(V) => V> {\n  return Object.keys(obj).reduce((memo, key) => {\n    const fn = obj[key];\n    memo[key] = function(...args) {\n      const result = fn.apply(this, args);\n      if (typeof result !== \"string\" || result.length === 0) {\n        const stringifiedArgs = require(\"util\").inspect(args);\n        throw new Error(\n          `Inflector for '${key}' returned '${String(\n            result\n          )}'; expected non-empty string\\n` +\n            `See: https://github.com/graphile/graphile-build/blob/master/packages/graphile-build-pg/src/plugins/PgBasicsPlugin.js\\n` +\n            `Arguments passed to ${key}:\\n${stringifiedArgs}`\n        );\n      }\n      return result;\n    };\n    return memo;\n  }, {});\n}\n\nconst omitWithRBACChecks = omit => (\n  entity: PgProc | PgClass | PgAttribute | PgConstraint,\n  permission: string\n) => {\n  const ORDINARY_TABLE = \"r\";\n  const VIEW = \"v\";\n  const MATERIALIZED_VIEW = \"m\";\n  const isTableLike = entity =>\n    entity &&\n    entity.kind === \"class\" &&\n    (entity.classKind === ORDINARY_TABLE ||\n      entity.classKind === VIEW ||\n      entity.classKind === MATERIALIZED_VIEW);\n  if (entity.kind === \"procedure\") {\n    if (permission === EXECUTE && !entity.aclExecutable) {\n      return true;\n    }\n  } else if (entity.kind === \"class\" && isTableLike(entity)) {\n    const tableEntity: PgClass = entity;\n    if (\n      (permission === READ || permission === ALL || permission === MANY) &&\n      (!tableEntity.aclSelectable &&\n        !tableEntity.attributes.some(attr => attr.aclSelectable))\n    ) {\n      return true;\n    } else if (\n      permission === CREATE &&\n      (!tableEntity.aclInsertable &&\n        !tableEntity.attributes.some(attr => attr.aclInsertable))\n    ) {\n      return true;\n    } else if (\n      permission === UPDATE &&\n      (!tableEntity.aclUpdatable &&\n        !tableEntity.attributes.some(attr => attr.aclUpdatable))\n    ) {\n      return true;\n    } else if (permission === DELETE && !tableEntity.aclDeletable) {\n      return true;\n    }\n  } else if (entity.kind === \"attribute\" && isTableLike(entity.class)) {\n    const attributeEntity: PgAttribute = entity;\n\n    const klass = attributeEntity.class;\n    // Have we got *any* permissions on the table?\n    if (\n      klass.aclSelectable ||\n      klass.attributes.some(attr => attr.aclSelectable)\n    ) {\n      // Yes; this is a regular table; omit if RBAC permissions tell us to.\n      if (\n        (permission === READ ||\n          permission === FILTER ||\n          permission === ORDER) &&\n        !attributeEntity.aclSelectable\n      ) {\n        return true;\n      } else if (permission === CREATE && !attributeEntity.aclInsertable) {\n        return true;\n      } else if (permission === UPDATE && !attributeEntity.aclUpdatable) {\n        return true;\n      }\n    } else {\n      // No permissions on the table at all, so normal connections will skip\n      // over it. Thus we must be being exposed via a security definer function\n      // or similar, so we should expose all fields except those that are\n      // explicitly @omit-ed.\n    }\n  }\n  return omit(entity, permission);\n};\n\nconst omitUnindexed = omit => (\n  entity: PgProc | PgClass | PgAttribute | PgConstraint,\n  permission: string\n) => {\n  if (\n    entity.kind === \"attribute\" &&\n    !entity.isIndexed &&\n    (permission === \"filter\" || permission === \"order\")\n  ) {\n    return true;\n  }\n  if (\n    entity.kind === \"constraint\" &&\n    entity.type === \"f\" &&\n    !entity.isIndexed &&\n    permission === \"read\"\n  ) {\n    let klass = entity.class;\n    if (klass) {\n      if (warn.enabled) {\n        warn(\n          \"%s\",\n          `We've disabled the 'read' permission for ${describePgEntity(\n            entity\n          )} because it isn't indexed. For more information see https://graphile.org/postgraphile/best-practices/ To fix this, perform\\n\\n  CREATE INDEX ON ${`\"${\n            klass.namespaceName\n          }\".\"${klass.name}\"`}(\"${entity.keyAttributes\n            .map(a => a.name)\n            .join('\", \"')}\");`\n        );\n      }\n    }\n    return true;\n  }\n  return omit(entity, permission);\n};\n\nfunction describePgEntity(entity: PgEntity, includeAlias = true) {\n  const getAlias = !includeAlias\n    ? () => \"\"\n    : () => {\n        const tags = pickBy(\n          entity.tags,\n          (value, key) => key === \"name\" || key.endsWith(\"Name\")\n        );\n        if (Object.keys(tags).length) {\n          return ` (with smart comments: ${chalk.bold(\n            Object.keys(tags)\n              .map(t => `@${t} ${tags[t]}`)\n              .join(\" | \")\n          )})`;\n        }\n        return \"\";\n      };\n\n  try {\n    if (entity.kind === \"constraint\") {\n      return `constraint ${chalk.bold(\n        `\"${entity.name}\"`\n      )} on ${describePgEntity(entity.class, false)}${getAlias()}`;\n    } else if (entity.kind === \"class\") {\n      // see pg_class.relkind https://www.postgresql.org/docs/10/static/catalog-pg-class.html\n      const kind =\n        {\n          c: \"composite type\",\n          f: \"foreign table\",\n          p: \"partitioned table\",\n          r: \"table\",\n          v: \"view\",\n          m: \"materialized view\",\n        }[entity.classKind] || \"table-like\";\n      return `${kind} ${chalk.bold(\n        `\"${entity.namespaceName}\".\"${entity.name}\"`\n      )}${getAlias()}`;\n    } else if (entity.kind === \"procedure\") {\n      return `function ${chalk.bold(\n        `\"${entity.namespaceName}\".\"${entity.name}\"(...args...)`\n      )}${getAlias()}`;\n    } else if (entity.kind === \"attribute\") {\n      return `column ${chalk.bold(`\"${entity.name}\"`)} on ${describePgEntity(\n        entity.class,\n        false\n      )}${getAlias()}`;\n    }\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error(\"Error occurred while attempting to debug entity:\", entity);\n    // eslint-disable-next-line no-console\n    console.error(e);\n  }\n  return `entity of kind '${entity.kind}' with ${\n    typeof entity.id === \"string\" ? `oid '${entity.id}'` : \"\"\n  }`;\n}\n\nfunction sqlCommentByAddingTags(entity, tagsToAdd) {\n  // NOTE: this function is NOT intended to be SQL safe; it's for\n  // displaying in error messages. Nonetheless if you find issues with\n  // SQL compatibility, please send a PR or issue.\n\n  // Ref: https://www.postgresql.org/docs/current/static/sql-syntax-lexical.html#SQL-BACKSLASH-TABLE\n  const escape = str =>\n    str.replace(\n      /['\\\\\\b\\f\\n\\r\\t]/g,\n      chr =>\n        ({\n          \"\\b\": \"\\\\b\",\n          \"\\f\": \"\\\\f\",\n          \"\\n\": \"\\\\n\",\n          \"\\r\": \"\\\\r\",\n          \"\\t\": \"\\\\t\",\n        }[chr] || \"\\\\\" + chr)\n    );\n\n  // tagsToAdd is here twice to ensure that the keys in tagsToAdd come first, but that they also \"win\" any conflicts.\n  const tags = Object.assign({}, tagsToAdd, entity.tags, tagsToAdd);\n\n  const description = entity.description;\n  const tagsSql = Object.keys(tags)\n    .reduce((memo, tag) => {\n      const tagValue = tags[tag];\n      const valueArray = Array.isArray(tagValue) ? tagValue : [tagValue];\n      const highlightOrNot = tag in tagsToAdd ? chalk.bold : identity;\n      valueArray.forEach(value => {\n        memo.push(\n          highlightOrNot(\n            `@${escape(escape(tag))}${\n              value === true ? \"\" : \" \" + escape(escape(value))\n            }`\n          )\n        );\n      });\n      return memo;\n    }, [])\n    .join(\"\\\\n\");\n  const commentValue = `E'${tagsSql}${\n    description ? \"\\\\n\" + escape(description) : \"\"\n  }'`;\n  let sqlThing;\n  if (entity.kind === \"class\") {\n    const identifier = `\"${entity.namespaceName}\".\"${entity.name}\"`;\n    if (entity.classKind === \"r\") {\n      sqlThing = `TABLE ${identifier}`;\n    } else if (entity.classKind === \"v\") {\n      sqlThing = `VIEW ${identifier}`;\n    } else if (entity.classKind === \"m\") {\n      sqlThing = `MATERIALIZED VIEW ${identifier}`;\n    } else {\n      sqlThing = `PLEASE_SEND_A_PULL_REQUEST_TO_FIX_THIS ${identifier}`;\n    }\n  } else if (entity.kind === \"attribute\") {\n    sqlThing = `COLUMN \"${entity.class.namespaceName}\".\"${\n      entity.class.name\n    }\".\"${entity.name}\"`;\n  } else if (entity.kind === \"procedure\") {\n    sqlThing = `FUNCTION \"${entity.namespaceName}\".\"${\n      entity.name\n    }\"(...arg types go here...)`;\n  } else if (entity.kind === \"constraint\") {\n    // TODO: TEST!\n    sqlThing = `CONSTRAINT \"${entity.name}\" ON \"${\n      entity.class.namespaceName\n    }\".\"${entity.class.name}\"`;\n  } else {\n    sqlThing = `UNKNOWN_ENTITY_PLEASE_SEND_A_PULL_REQUEST`;\n  }\n\n  return `COMMENT ON ${sqlThing} IS ${commentValue};`;\n}\n\nexport default (function PgBasicsPlugin(\n  builder,\n  {\n    pgStrictFunctions = false,\n    pgColumnFilter = defaultPgColumnFilter,\n    pgIgnoreRBAC = false,\n    pgIgnoreIndexes = true, // TODO:v5: change this to false\n  }\n) {\n  let pgOmit = baseOmit;\n  if (!pgIgnoreRBAC) {\n    pgOmit = omitWithRBACChecks(pgOmit);\n  }\n  if (!pgIgnoreIndexes) {\n    pgOmit = omitUnindexed(pgOmit);\n  }\n  builder.hook(\"build\", build => {\n    return build.extend(build, {\n      graphileBuildPgVersion: version,\n      pgSql: sql,\n      pgStrictFunctions,\n      pgColumnFilter,\n      pgQueryFromResolveData: queryFromResolveData,\n      pgAddStartEndCursor: addStartEndCursor,\n      pgOmit,\n      pgMakeProcField: makeProcField,\n      pgParseIdentifier: parseIdentifier,\n      pgViaTemporaryTable: viaTemporaryTable,\n      describePgEntity,\n      pgField,\n      sqlCommentByAddingTags,\n    });\n  });\n\n  builder.hook(\"inflection\", (inflection, build) => {\n    return build.extend(\n      inflection,\n      preventEmptyResult({\n        // These helpers are passed GraphQL type names as strings\n        conditionType(typeName: string) {\n          return this.upperCamelCase(`${typeName}-condition`);\n        },\n        inputType(typeName: string) {\n          return this.upperCamelCase(`${typeName}-input`);\n        },\n        rangeBoundType(typeName: string) {\n          return this.upperCamelCase(`${typeName}-range-bound`);\n        },\n        rangeType(typeName: string) {\n          return this.upperCamelCase(`${typeName}-range`);\n        },\n        patchType(typeName: string) {\n          return this.upperCamelCase(`${typeName}-patch`);\n        },\n        baseInputType(typeName: string) {\n          return this.upperCamelCase(`${typeName}-base-input`);\n        },\n        patchField(itemName: string) {\n          return this.camelCase(`${itemName}-patch`);\n        },\n        orderByType(typeName: string) {\n          return this.upperCamelCase(`${this.pluralize(typeName)}-order-by`);\n        },\n        edge(typeName: string) {\n          return this.upperCamelCase(`${this.pluralize(typeName)}-edge`);\n        },\n        connection(typeName: string) {\n          return this.upperCamelCase(`${this.pluralize(typeName)}-connection`);\n        },\n\n        // These helpers handle overrides via smart comments. They should only\n        // be used in other inflectors, hence the underscore prefix.\n        //\n        // IMPORTANT: do NOT do case transforms here, because detail can be\n        // lost, e.g.\n        // `constantCase(camelCase('foo_1')) !== constantCase('foo_1')`\n        _functionName(proc: PgProc) {\n          return proc.tags.name || proc.name;\n        },\n        _typeName(type: PgType) {\n          // 'type' introspection result\n          return type.tags.name || type.name;\n        },\n        _tableName(table: PgClass) {\n          return table.tags.name || table.type.tags.name || table.name;\n        },\n        _singularizedTableName(table: PgClass): string {\n          return this.singularize(this._tableName(table)).replace(\n            /.(?:(?:[_-]i|I)nput|(?:[_-]p|P)atch)$/,\n            \"$&_record\"\n          );\n        },\n        _columnName(attr: PgAttribute, _options?: { skipRowId?: boolean }) {\n          return attr.tags.name || attr.name;\n        },\n\n        // From here down, functions are passed database introspection results\n        enumType(type: PgType) {\n          return this.upperCamelCase(this._typeName(type));\n        },\n        argument(name: ?string, index: number) {\n          return this.camelCase(name || `arg${index}`);\n        },\n        orderByColumnEnum(attr: PgAttribute, ascending: boolean) {\n          const columnName = this._columnName(attr, {\n            skipRowId: true, // Because we messed up 😔\n          });\n          return this.constantCase(\n            `${columnName}_${ascending ? \"asc\" : \"desc\"}`\n          );\n        },\n        domainType(type: PgType) {\n          return this.upperCamelCase(this._typeName(type));\n        },\n        enumName(inValue: string) {\n          let value = inValue;\n\n          if (value === \"\") {\n            return \"_EMPTY_\";\n          }\n\n          // Some enums use asterisks to signify wildcards - this might be for\n          // the whole item, or prefixes/suffixes, or even in the middle.  This\n          // is provided on a best efforts basis, if it doesn't suit your\n          // purposes then please pass a custom inflector as mentioned below.\n          value = value\n            .replace(/\\*/g, \"_ASTERISK_\")\n            .replace(/^(_?)_+ASTERISK/, \"$1ASTERISK\")\n            .replace(/ASTERISK_(_?)_*$/, \"ASTERISK$1\");\n\n          // This is a best efforts replacement for common symbols that you\n          // might find in enums. Generally we only support enums that are\n          // alphanumeric, if these replacements don't work for you, you should\n          // pass a custom inflector that replaces this `enumName` method\n          // with one of your own chosing.\n          value =\n            {\n              // SQL comparison operators\n              \">\": \"GREATER_THAN\",\n              \">=\": \"GREATER_THAN_OR_EQUAL\",\n              \"=\": \"EQUAL\",\n              \"!=\": \"NOT_EQUAL\",\n              \"<>\": \"DIFFERENT\",\n              \"<=\": \"LESS_THAN_OR_EQUAL\",\n              \"<\": \"LESS_THAN\",\n\n              // PostgreSQL LIKE shortcuts\n              \"~~\": \"LIKE\",\n              \"~~*\": \"ILIKE\",\n              \"!~~\": \"NOT_LIKE\",\n              \"!~~*\": \"NOT_ILIKE\",\n\n              // '~' doesn't necessarily represent regexps, but the three\n              // operators following it likely do, so we'll use the word TILDE\n              // in all for consistency.\n              \"~\": \"TILDE\",\n              \"~*\": \"TILDE_ASTERISK\",\n              \"!~\": \"NOT_TILDE\",\n              \"!~*\": \"NOT_TILDE_ASTERISK\",\n\n              // A number of other symbols where we're not sure of their\n              // meaning.  We give them common generic names so that they're\n              // suitable for multiple purposes, e.g. favouring 'PLUS' over\n              // 'ADDITION' and 'DOT' over 'FULL_STOP'\n              \"%\": \"PERCENT\",\n              \"+\": \"PLUS\",\n              \"-\": \"MINUS\",\n              \"/\": \"SLASH\",\n              \"\\\\\": \"BACKSLASH\",\n              _: \"UNDERSCORE\",\n              \"#\": \"POUND\",\n              \"£\": \"STERLING\",\n              $: \"DOLLAR\",\n              \"&\": \"AMPERSAND\",\n              \"@\": \"AT\",\n              \"'\": \"APOSTROPHE\",\n              '\"': \"QUOTE\",\n              \"`\": \"BACKTICK\",\n              \":\": \"COLON\",\n              \";\": \"SEMICOLON\",\n              \"!\": \"EXCLAMATION_POINT\",\n              \"?\": \"QUESTION_MARK\",\n              \",\": \"COMMA\",\n              \".\": \"DOT\",\n              \"^\": \"CARET\",\n              \"|\": \"BAR\",\n              \"[\": \"OPEN_BRACKET\",\n              \"]\": \"CLOSE_BRACKET\",\n              \"(\": \"OPEN_PARENTHESIS\",\n              \")\": \"CLOSE_PARENTHESIS\",\n              \"{\": \"OPEN_BRACE\",\n              \"}\": \"CLOSE_BRACE\",\n            }[value] || value;\n          return value;\n        },\n\n        tableNode(table: PgClass) {\n          return this.camelCase(this._singularizedTableName(table));\n        },\n        tableFieldName(table: PgClass) {\n          return this.camelCase(this._singularizedTableName(table));\n        },\n        allRows(table: PgClass) {\n          return this.camelCase(\n            `all-${this.pluralize(this._singularizedTableName(table))}`\n          );\n        },\n        allRowsSimple(table: PgClass) {\n          return this.camelCase(\n            `all-${this.pluralize(this._singularizedTableName(table))}-list`\n          );\n        },\n        functionMutationName(proc: PgProc) {\n          return this.camelCase(this._functionName(proc));\n        },\n        functionMutationResultFieldName(\n          proc: PgProc,\n          gqlType,\n          plural: boolean = false,\n          outputArgNames: Array<string> = []\n        ) {\n          if (proc.tags.resultFieldName) {\n            return proc.tags.resultFieldName;\n          }\n          let name;\n          if (outputArgNames.length === 1 && outputArgNames[0] !== \"\") {\n            name = this.camelCase(outputArgNames[0]);\n          } else if (gqlType.name === \"Int\") {\n            name = \"integer\";\n          } else if (gqlType.name === \"Float\") {\n            name = \"float\";\n          } else if (gqlType.name === \"Boolean\") {\n            name = \"boolean\";\n          } else if (gqlType.name === \"String\") {\n            name = \"string\";\n          } else if (proc.returnTypeId === \"2249\") {\n            // returns a record type\n            name = \"result\";\n          } else {\n            name = this.camelCase(gqlType.name);\n          }\n          return plural ? this.pluralize(name) : name;\n        },\n        functionQueryName(proc: PgProc) {\n          return this.camelCase(this._functionName(proc));\n        },\n        functionQueryNameList(proc: PgProc) {\n          return this.camelCase(`${this._functionName(proc)}-list`);\n        },\n        functionPayloadType(proc: PgProc) {\n          return this.upperCamelCase(`${this._functionName(proc)}-payload`);\n        },\n        functionInputType(proc: PgProc) {\n          return this.upperCamelCase(`${this._functionName(proc)}-input`);\n        },\n        functionOutputFieldName(\n          proc: PgProc,\n          outputArgName: string,\n          index: number\n        ) {\n          return this.argument(outputArgName, index);\n        },\n        tableType(table: PgClass) {\n          return this.upperCamelCase(this._singularizedTableName(table));\n        },\n        column(attr: PgAttribute) {\n          return this.camelCase(this._columnName(attr));\n        },\n        computedColumn(\n          pseudoColumnName: string,\n          proc: PgProc,\n          _table: PgClass\n        ) {\n          return proc.tags.fieldName || this.camelCase(pseudoColumnName);\n        },\n        computedColumnList(\n          pseudoColumnName: string,\n          proc: PgProc,\n          _table: PgClass\n        ) {\n          return proc.tags.fieldName\n            ? proc.tags.fieldName + \"List\"\n            : this.camelCase(`${pseudoColumnName}-list`);\n        },\n        singleRelationByKeys(\n          detailedKeys: Keys,\n          table: PgClass,\n          _foreignTable: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.fieldName) {\n            return constraint.tags.fieldName;\n          }\n          return this.camelCase(\n            `${this._singularizedTableName(table)}-by-${detailedKeys\n              .map(key => this.column(key))\n              .join(\"-and-\")}`\n          );\n        },\n        singleRelationByKeysBackwards(\n          detailedKeys: Keys,\n          table: PgClass,\n          _foreignTable: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.foreignSingleFieldName) {\n            return constraint.tags.foreignSingleFieldName;\n          }\n          if (constraint.tags.foreignFieldName) {\n            return constraint.tags.foreignFieldName;\n          }\n          return this.singleRelationByKeys(\n            detailedKeys,\n            table,\n            _foreignTable,\n            constraint\n          );\n        },\n        manyRelationByKeys(\n          detailedKeys: Keys,\n          table: PgClass,\n          _foreignTable: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.foreignFieldName) {\n            return constraint.tags.foreignFieldName;\n          }\n          return this.camelCase(\n            `${this.pluralize(\n              this._singularizedTableName(table)\n            )}-by-${detailedKeys.map(key => this.column(key)).join(\"-and-\")}`\n          );\n        },\n        manyRelationByKeysSimple(\n          detailedKeys: Keys,\n          table: PgClass,\n          _foreignTable: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.foreignSimpleFieldName) {\n            return constraint.tags.foreignSimpleFieldName;\n          }\n          if (constraint.tags.foreignFieldName) {\n            return constraint.tags.foreignFieldName;\n          }\n          return this.camelCase(\n            `${this.pluralize(\n              this._singularizedTableName(table)\n            )}-by-${detailedKeys\n              .map(key => this.column(key))\n              .join(\"-and-\")}-list`\n          );\n        },\n        rowByUniqueKeys(\n          detailedKeys: Keys,\n          table: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.fieldName) {\n            return constraint.tags.fieldName;\n          }\n          return this.camelCase(\n            `${this._singularizedTableName(table)}-by-${detailedKeys\n              .map(key => this.column(key))\n              .join(\"-and-\")}`\n          );\n        },\n        updateByKeys(\n          detailedKeys: Keys,\n          table: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.updateFieldName) {\n            return constraint.tags.updateFieldName;\n          }\n          return this.camelCase(\n            `update-${this._singularizedTableName(table)}-by-${detailedKeys\n              .map(key => this.column(key))\n              .join(\"-and-\")}`\n          );\n        },\n        deleteByKeys(\n          detailedKeys: Keys,\n          table: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.deleteFieldName) {\n            return constraint.tags.deleteFieldName;\n          }\n          return this.camelCase(\n            `delete-${this._singularizedTableName(table)}-by-${detailedKeys\n              .map(key => this.column(key))\n              .join(\"-and-\")}`\n          );\n        },\n        updateByKeysInputType(\n          detailedKeys: Keys,\n          table: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.updateFieldName) {\n            return this.upperCamelCase(\n              `${constraint.tags.updateFieldName}-input`\n            );\n          }\n          return this.upperCamelCase(\n            `update-${this._singularizedTableName(table)}-by-${detailedKeys\n              .map(key => this.column(key))\n              .join(\"-and-\")}-input`\n          );\n        },\n        deleteByKeysInputType(\n          detailedKeys: Keys,\n          table: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.deleteFieldName) {\n            return this.upperCamelCase(\n              `${constraint.tags.deleteFieldName}-input`\n            );\n          }\n          return this.upperCamelCase(\n            `delete-${this._singularizedTableName(table)}-by-${detailedKeys\n              .map(key => this.column(key))\n              .join(\"-and-\")}-input`\n          );\n        },\n        updateNode(table: PgClass) {\n          return this.camelCase(`update-${this._singularizedTableName(table)}`);\n        },\n        deleteNode(table: PgClass) {\n          return this.camelCase(`delete-${this._singularizedTableName(table)}`);\n        },\n        updateNodeInputType(table: PgClass) {\n          return this.upperCamelCase(\n            `update-${this._singularizedTableName(table)}-input`\n          );\n        },\n        deleteNodeInputType(table: PgClass) {\n          return this.upperCamelCase(\n            `delete-${this._singularizedTableName(table)}-input`\n          );\n        },\n        edgeField(table: PgClass) {\n          return this.camelCase(`${this._singularizedTableName(table)}-edge`);\n        },\n        recordFunctionReturnType(proc: PgProc) {\n          return (\n            proc.tags.resultTypeName ||\n            this.upperCamelCase(`${this._functionName(proc)}-record`)\n          );\n        },\n        recordFunctionConnection(proc: PgProc) {\n          return this.upperCamelCase(`${this._functionName(proc)}-connection`);\n        },\n        recordFunctionEdge(proc: PgProc) {\n          return this.upperCamelCase(\n            `${this.singularize(this._functionName(proc))}-edge`\n          );\n        },\n        scalarFunctionConnection(proc: PgProc) {\n          return this.upperCamelCase(`${this._functionName(proc)}-connection`);\n        },\n        scalarFunctionEdge(proc: PgProc) {\n          return this.upperCamelCase(\n            `${this.singularize(this._functionName(proc))}-edge`\n          );\n        },\n        createField(table: PgClass) {\n          return this.camelCase(`create-${this._singularizedTableName(table)}`);\n        },\n        createInputType(table: PgClass) {\n          return this.upperCamelCase(\n            `create-${this._singularizedTableName(table)}-input`\n          );\n        },\n        createPayloadType(table: PgClass) {\n          return this.upperCamelCase(\n            `create-${this._singularizedTableName(table)}-payload`\n          );\n        },\n        updatePayloadType(table: PgClass) {\n          return this.upperCamelCase(\n            `update-${this._singularizedTableName(table)}-payload`\n          );\n        },\n        deletePayloadType(table: PgClass) {\n          return this.upperCamelCase(\n            `delete-${this._singularizedTableName(table)}-payload`\n          );\n        },\n      }),\n      \"Default inflectors from PgBasicsPlugin. You can override these with `makeAddInflectorsPlugin(..., true)`.\"\n    );\n  });\n}: Plugin);\n"]}