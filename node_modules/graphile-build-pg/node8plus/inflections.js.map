{"version":3,"sources":["../src/inflections.js"],"names":["defaultUtils","constantCase","camelCase","upperCamelCase","pluralize","singularize","newInflector","overrides","undefined","singularizeTable","tableName","replace","Object","assign","argument","name","index","orderByType","typeName","orderByEnum","ascending","_table","_schema","domainType","enumName","inValue","value","_","$","enumType","conditionType","inputType","rangeBoundType","rangeType","patchType","patchField","itemName","tableNode","allRows","schema","functionName","functionPayloadType","functionInputType","tableType","column","singleRelationByKeys","detailedKeys","table","map","key","join","rowByUniqueKeys","updateByKeys","deleteByKeys","updateNode","deleteNode","updateByKeysInputType","deleteByKeysInputType","updateNodeInputType","deleteNodeInputType","manyRelationByKeys","_foreignTable","_foreignSchema","edge","edgeField","connection","scalarFunctionConnection","procName","_procSchema","scalarFunctionEdge","createField","createInputType","createPayloadType","updatePayloadType","deletePayloadType","defaultInflection"],"mappings":"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","file":"inflections.js","sourcesContent":["// @flow\nimport {\n  upperCamelCase,\n  camelCase,\n  constantCase,\n  pluralize,\n  singularize,\n} from \"graphile-build\";\n\nimport { preventEmptyResult } from \"./plugins/PgBasicsPlugin\";\n\ntype Keys = Array<{\n  column: string,\n  table: string,\n  schema: ?string,\n}>;\n\ntype InflectorUtils = {|\n  constantCase: string => string,\n  camelCase: string => string,\n  upperCamelCase: string => string,\n  pluralize: string => string,\n  singularize: string => string,\n|};\n\nexport const defaultUtils: InflectorUtils = {\n  constantCase,\n  camelCase,\n  upperCamelCase,\n  pluralize,\n  singularize,\n};\n\nexport type Inflector = {\n  // TODO: tighten this up!\n  // eslint-disable-next-line flowtype/no-weak-types\n  [string]: (...input: Array<any>) => string,\n};\n\nexport const newInflector = (\n  overrides: ?{ [string]: () => string } = undefined,\n  {\n    constantCase,\n    camelCase,\n    upperCamelCase,\n    pluralize,\n    singularize,\n  }: InflectorUtils = defaultUtils\n): Inflector => {\n  function singularizeTable(tableName: string): string {\n    return singularize(tableName).replace(\n      /.(?:(?:[_-]i|I)nput|(?:[_-]p|P)atch)$/,\n      \"$&_record\"\n    );\n  }\n\n  return preventEmptyResult(\n    Object.assign(\n      {\n        pluralize,\n        argument(name: ?string, index: number) {\n          return camelCase(name || `arg${index}`);\n        },\n        orderByType(typeName: string) {\n          return upperCamelCase(`${pluralize(typeName)}-order-by`);\n        },\n        orderByEnum(\n          name: string,\n          ascending: boolean,\n          _table: string,\n          _schema: ?string\n        ) {\n          return constantCase(`${name}_${ascending ? \"asc\" : \"desc\"}`);\n        },\n        domainType(name: string) {\n          return upperCamelCase(name);\n        },\n        enumName(inValue: string) {\n          let value = inValue;\n\n          if (value === \"\") {\n            return \"_EMPTY_\";\n          }\n\n          // Some enums use asterisks to signify wildcards - this might be for\n          // the whole item, or prefixes/suffixes, or even in the middle.  This\n          // is provided on a best efforts basis, if it doesn't suit your\n          // purposes then please pass a custom inflector as mentioned below.\n          value = value\n            .replace(/\\*/g, \"_ASTERISK_\")\n            .replace(/^(_?)_+ASTERISK/, \"$1ASTERISK\")\n            .replace(/ASTERISK_(_?)_*$/, \"ASTERISK$1\");\n\n          // This is a best efforts replacement for common symbols that you\n          // might find in enums. Generally we only support enums that are\n          // alphanumeric, if these replacements don't work for you, you should\n          // pass a custom inflector that replaces this `enumName` method\n          // with one of your own chosing.\n          value =\n            {\n              // SQL comparison operators\n              \">\": \"GREATER_THAN\",\n              \">=\": \"GREATER_THAN_OR_EQUAL\",\n              \"=\": \"EQUAL\",\n              \"!=\": \"NOT_EQUAL\",\n              \"<>\": \"DIFFERENT\",\n              \"<=\": \"LESS_THAN_OR_EQUAL\",\n              \"<\": \"LESS_THAN\",\n\n              // PostgreSQL LIKE shortcuts\n              \"~~\": \"LIKE\",\n              \"~~*\": \"ILIKE\",\n              \"!~~\": \"NOT_LIKE\",\n              \"!~~*\": \"NOT_ILIKE\",\n\n              // '~' doesn't necessarily represent regexps, but the three\n              // operators following it likely do, so we'll use the word TILDE\n              // in all for consistency.\n              \"~\": \"TILDE\",\n              \"~*\": \"TILDE_ASTERISK\",\n              \"!~\": \"NOT_TILDE\",\n              \"!~*\": \"NOT_TILDE_ASTERISK\",\n\n              // A number of other symbols where we're not sure of their\n              // meaning.  We give them common generic names so that they're\n              // suitable for multiple purposes, e.g. favouring 'PLUS' over\n              // 'ADDITION' and 'DOT' over 'FULL_STOP'\n              \"%\": \"PERCENT\",\n              \"+\": \"PLUS\",\n              \"-\": \"MINUS\",\n              \"/\": \"SLASH\",\n              \"\\\\\": \"BACKSLASH\",\n              _: \"UNDERSCORE\",\n              \"#\": \"POUND\",\n              \"£\": \"STERLING\",\n              $: \"DOLLAR\",\n              \"&\": \"AMPERSAND\",\n              \"@\": \"AT\",\n              \"'\": \"APOSTROPHE\",\n              '\"': \"QUOTE\",\n              \"`\": \"BACKTICK\",\n              \":\": \"COLON\",\n              \";\": \"SEMICOLON\",\n              \"!\": \"EXCLAMATION_POINT\",\n              \"?\": \"QUESTION_MARK\",\n              \",\": \"COMMA\",\n              \".\": \"DOT\",\n              \"^\": \"CARET\",\n              \"|\": \"BAR\",\n              \"[\": \"OPEN_BRACKET\",\n              \"]\": \"CLOSE_BRACKET\",\n              \"(\": \"OPEN_PARENTHESIS\",\n              \")\": \"CLOSE_PARENTHESIS\",\n              \"{\": \"OPEN_BRACE\",\n              \"}\": \"CLOSE_BRACE\",\n            }[value] || value;\n          return value;\n        },\n        enumType(name: string) {\n          return upperCamelCase(name);\n        },\n        conditionType(typeName: string) {\n          return upperCamelCase(`${typeName}-condition`);\n        },\n        inputType(typeName: string) {\n          return upperCamelCase(`${typeName}-input`);\n        },\n        rangeBoundType(typeName: string) {\n          return upperCamelCase(`${typeName}-range-bound`);\n        },\n        rangeType(typeName: string) {\n          return upperCamelCase(`${typeName}-range`);\n        },\n        patchType(typeName: string) {\n          return upperCamelCase(`${typeName}-patch`);\n        },\n        patchField(itemName: string) {\n          return camelCase(`${itemName}-patch`);\n        },\n        tableName(name: string, _schema: ?string) {\n          return camelCase(singularizeTable(name));\n        },\n        tableNode(name: string, _schema: ?string) {\n          return camelCase(singularizeTable(name));\n        },\n        allRows(name: string, schema: ?string) {\n          return camelCase(\n            `all-${this.pluralize(this.tableName(name, schema))}`\n          );\n        },\n        functionName(name: string, _schema: ?string) {\n          return camelCase(name);\n        },\n        functionPayloadType(name: string, _schema: ?string) {\n          return upperCamelCase(`${name}-payload`);\n        },\n        functionInputType(name: string, _schema: ?string) {\n          return upperCamelCase(`${name}-input`);\n        },\n        tableType(name: string, schema: ?string) {\n          return upperCamelCase(this.tableName(name, schema));\n        },\n        column(name: string, _table: string, _schema: ?string) {\n          return camelCase(name);\n        },\n        singleRelationByKeys(\n          detailedKeys: Keys,\n          table: string,\n          schema: ?string\n        ) {\n          return camelCase(\n            `${this.tableName(table, schema)}-by-${detailedKeys\n              .map(key => this.column(key.column, key.table, key.schema))\n              .join(\"-and-\")}`\n          );\n        },\n        rowByUniqueKeys(detailedKeys: Keys, table: string, schema: ?string) {\n          return camelCase(\n            `${this.tableName(table, schema)}-by-${detailedKeys\n              .map(key => this.column(key.column, key.table, key.schema))\n              .join(\"-and-\")}`\n          );\n        },\n        updateByKeys(detailedKeys: Keys, table: string, schema: ?string) {\n          return camelCase(\n            `update-${this.tableName(table, schema)}-by-${detailedKeys\n              .map(key => this.column(key.column, key.table, key.schema))\n              .join(\"-and-\")}`\n          );\n        },\n        deleteByKeys(detailedKeys: Keys, table: string, schema: ?string) {\n          return camelCase(\n            `delete-${this.tableName(table, schema)}-by-${detailedKeys\n              .map(key => this.column(key.column, key.table, key.schema))\n              .join(\"-and-\")}`\n          );\n        },\n        updateNode(name: string, _schema: ?string) {\n          return camelCase(`update-${singularizeTable(name)}`);\n        },\n        deleteNode(name: string, _schema: ?string) {\n          return camelCase(`delete-${singularizeTable(name)}`);\n        },\n        updateByKeysInputType(\n          detailedKeys: Keys,\n          name: string,\n          _schema: ?string\n        ) {\n          return upperCamelCase(\n            `update-${singularizeTable(name)}-by-${detailedKeys\n              .map(key => this.column(key.column, key.table, key.schema))\n              .join(\"-and-\")}-input`\n          );\n        },\n        deleteByKeysInputType(\n          detailedKeys: Keys,\n          name: string,\n          _schema: ?string\n        ) {\n          return upperCamelCase(\n            `delete-${singularizeTable(name)}-by-${detailedKeys\n              .map(key => this.column(key.column, key.table, key.schema))\n              .join(\"-and-\")}-input`\n          );\n        },\n        updateNodeInputType(name: string, _schema: ?string) {\n          return upperCamelCase(`update-${singularizeTable(name)}-input`);\n        },\n        deleteNodeInputType(name: string, _schema: ?string) {\n          return upperCamelCase(`delete-${singularizeTable(name)}-input`);\n        },\n        manyRelationByKeys(\n          detailedKeys: Keys,\n          table: string,\n          schema: ?string,\n          _foreignTable: string,\n          _foreignSchema: ?string\n        ) {\n          return camelCase(\n            `${this.pluralize(\n              this.tableName(table, schema)\n            )}-by-${detailedKeys\n              .map(key => this.column(key.column, key.table, key.schema))\n              .join(\"-and-\")}`\n          );\n        },\n        edge(typeName: string) {\n          return upperCamelCase(`${pluralize(typeName)}-edge`);\n        },\n        edgeField(name: string, _schema: ?string) {\n          return camelCase(`${singularizeTable(name)}-edge`);\n        },\n        connection(typeName: string) {\n          return upperCamelCase(`${this.pluralize(typeName)}-connection`);\n        },\n        scalarFunctionConnection(procName: string, _procSchema: ?string) {\n          return upperCamelCase(`${procName}-connection`);\n        },\n        scalarFunctionEdge(procName: string, _procSchema: ?string) {\n          return upperCamelCase(`${procName}-edge`);\n        },\n        createField(name: string, _schema: ?string) {\n          return camelCase(`create-${singularizeTable(name)}`);\n        },\n        createInputType(name: string, _schema: ?string) {\n          return upperCamelCase(`create-${singularizeTable(name)}-input`);\n        },\n        createPayloadType(name: string, _schema: ?string) {\n          return upperCamelCase(`create-${singularizeTable(name)}-payload`);\n        },\n        updatePayloadType(name: string, _schema: ?string) {\n          return upperCamelCase(`update-${singularizeTable(name)}-payload`);\n        },\n        deletePayloadType(name: string, _schema: ?string) {\n          return upperCamelCase(`delete-${singularizeTable(name)}-payload`);\n        },\n      },\n      overrides\n    )\n  );\n};\n\nexport const defaultInflection = newInflector();\n"]}