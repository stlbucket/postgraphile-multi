{"version":3,"sources":["../../src/plugins/QueryPlugin.js"],"names":["QueryPlugin","builder","hook","build","extend","$$isQuery","Symbol","schema","newWithHooks","graphql","GraphQLObjectType","GraphQLNonNull","queryType","description","name","isTypeOf","value","_context","info","parentType","fields","Self","query","type","resolve","__origin","isRootQuery"],"mappings":";;;;;;kBAOgB,eAAeA,WAAf,CAA2BC,OAA3B,EAAoC;AAClDA,UAAQC,IAAR,CACE,OADF,EAEGC,KAAD,IACEA,MAAMC,MAAN,CACED,KADF,EAEE;AACEE,eAAWC,OAAO,SAAP;AADb,GAFF,EAKG,iBALH,CAHJ;AAWAL,UAAQC,IAAR,CAAa,eAAb,EAA8B,CAACK,MAAD,EAAaJ,KAAb,KAAuB;AACnD,UAAM;AACJE,eADI;AAEJG,kBAFI;AAGJJ,YAHI;AAIJK,eAAS,EAAEC,iBAAF,EAAqBC,cAArB;AAJL,QAKFR,KALJ;AAMA,UAAMS,YAAYJ,aAChBE,iBADgB,EAEhB;AACEG,mBACE,uEAFJ;AAGEC,YAAM,OAHR;AAIEC,gBAAU,CAACC,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,KACRA,KAAKC,UAAL,IAAmB,IAAnB,IAA2BH,UAAUX,SALzC;AAMEe,cAAQ,CAAC,EAAEC,IAAF,EAAD,MAAe;AACrBC,eAAO;AACLT,uBACE,wJAFG;AAGLU,gBAAM,IAAIZ,cAAJ,CAAmBU,IAAnB,CAHD;AAILG,oBAAU;AACR,mBAAOnB,SAAP;AACD;AANI;AADc,OAAf;AANV,KAFgB,EAmBhB;AACEoB,gBAAW,2CADb;AAEEC,mBAAa;AAFf,KAnBgB,EAuBhB,IAvBgB,CAAlB;AAyBA,QAAId,SAAJ,EAAe;AACb,aAAOR,OACLG,MADK,EAEL;AACEe,eAAOV;AADT,OAFK,EAKJ,+BALI,CAAP;AAOD,KARD,MAQO;AACL,aAAOL,MAAP;AACD;AACF,GA3CD;AA4CD,C","file":"QueryPlugin.js","sourcesContent":["// @flow\nimport type { Plugin, Build } from \"../SchemaBuilder\";\n\nexport type BuildExtensionQuery = {|\n  $$isQuery: Symbol,\n|};\n\nexport default (async function QueryPlugin(builder) {\n  builder.hook(\n    \"build\",\n    (build: Build): Build & BuildExtensionQuery =>\n      build.extend(\n        build,\n        {\n          $$isQuery: Symbol(\"isQuery\"),\n        },\n        `Extending Build`\n      )\n  );\n  builder.hook(\"GraphQLSchema\", (schema: {}, build) => {\n    const {\n      $$isQuery,\n      newWithHooks,\n      extend,\n      graphql: { GraphQLObjectType, GraphQLNonNull },\n    } = build;\n    const queryType = newWithHooks(\n      GraphQLObjectType,\n      {\n        description:\n          \"The root query type which gives access points into the data universe.\",\n        name: \"Query\",\n        isTypeOf: (value, _context, info) =>\n          info.parentType == null || value === $$isQuery,\n        fields: ({ Self }) => ({\n          query: {\n            description:\n              \"Exposes the root query type nested one level down. This is helpful for Relay 1 which can only query top level fields if they are in a particular form.\",\n            type: new GraphQLNonNull(Self),\n            resolve() {\n              return $$isQuery;\n            },\n          },\n        }),\n      },\n      {\n        __origin: `graphile-build built-in (root query type)`,\n        isRootQuery: true,\n      },\n      true\n    );\n    if (queryType) {\n      return extend(\n        schema,\n        {\n          query: queryType,\n        },\n        `Adding 'query' type to Schema`\n      );\n    } else {\n      return schema;\n    }\n  });\n}: Plugin);\n"]}