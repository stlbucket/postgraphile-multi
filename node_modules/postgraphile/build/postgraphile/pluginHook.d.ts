/// <reference types="node" />
import { AddFlagFn } from './cli';
import { Server } from 'http';
import { HttpRequestHandler, PostGraphileOptions } from '../interfaces';
import { WithPostGraphileContextFn } from './withPostGraphileContext';
export declare type HookFn<T> = (arg: T, context: {}) => T;
export declare type PluginHookFn = <T>(hookName: string, argument: T, context?: {}) => T;
export interface PostGraphilePlugin {
    pluginHook?: HookFn<PluginHookFn>;
    'cli:flags:add:standard'?: HookFn<AddFlagFn>;
    'cli:flags:add:schema'?: HookFn<AddFlagFn>;
    'cli:flags:add:errorHandling'?: HookFn<AddFlagFn>;
    'cli:flags:add:plugins'?: HookFn<AddFlagFn>;
    'cli:flags:add:noServer'?: HookFn<AddFlagFn>;
    'cli:flags:add:webserver'?: HookFn<AddFlagFn>;
    'cli:flags:add:jwt'?: HookFn<AddFlagFn>;
    'cli:flags:add'?: HookFn<AddFlagFn>;
    'cli:flags:add:deprecated'?: HookFn<AddFlagFn>;
    'cli:flags:add:workarounds'?: HookFn<AddFlagFn>;
    'cli:server:middleware'?: HookFn<HttpRequestHandler>;
    'cli:server:created'?: HookFn<Server>;
    'postgraphile:options'?: HookFn<PostGraphileOptions>;
    withPostGraphileContext?: HookFn<WithPostGraphileContextFn>;
}
export declare function makePluginHook(plugins: Array<PostGraphilePlugin>): PluginHookFn;
export declare function pluginHookFromOptions(options: PostGraphileOptions): PluginHookFn;
